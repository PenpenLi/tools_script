// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: RankList_Ack.proto

#ifndef PROTOBUF_RankList_5fAck_2eproto__INCLUDED
#define PROTOBUF_RankList_5fAck_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace protobuf {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_RankList_5fAck_2eproto();
void protobuf_AssignDesc_RankList_5fAck_2eproto();
void protobuf_ShutdownFile_RankList_5fAck_2eproto();

class RankList_Ack;
class RankList_Ack_Rank;

// ===================================================================

class RankList_Ack_Rank : public ::google::protobuf::Message {
 public:
  RankList_Ack_Rank();
  virtual ~RankList_Ack_Rank();

  RankList_Ack_Rank(const RankList_Ack_Rank& from);

  inline RankList_Ack_Rank& operator=(const RankList_Ack_Rank& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RankList_Ack_Rank& default_instance();

  void Swap(RankList_Ack_Rank* other);

  // implements Message ----------------------------------------------

  RankList_Ack_Rank* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RankList_Ack_Rank& from);
  void MergeFrom(const RankList_Ack_Rank& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 playerId = 1;
  inline bool has_playerid() const;
  inline void clear_playerid();
  static const int kPlayerIdFieldNumber = 1;
  inline ::google::protobuf::int32 playerid() const;
  inline void set_playerid(::google::protobuf::int32 value);

  // optional string nickname = 2;
  inline bool has_nickname() const;
  inline void clear_nickname();
  static const int kNicknameFieldNumber = 2;
  inline const ::std::string& nickname() const;
  inline void set_nickname(const ::std::string& value);
  inline void set_nickname(const char* value);
  inline void set_nickname(const char* value, size_t size);
  inline ::std::string* mutable_nickname();
  inline ::std::string* release_nickname();
  inline void set_allocated_nickname(::std::string* nickname);

  // optional int32 level = 3;
  inline bool has_level() const;
  inline void clear_level();
  static const int kLevelFieldNumber = 3;
  inline ::google::protobuf::int32 level() const;
  inline void set_level(::google::protobuf::int32 value);

  // optional int32 score = 4;
  inline bool has_score() const;
  inline void clear_score();
  static const int kScoreFieldNumber = 4;
  inline ::google::protobuf::int32 score() const;
  inline void set_score(::google::protobuf::int32 value);

  // optional int32 roleType = 5;
  inline bool has_roletype() const;
  inline void clear_roletype();
  static const int kRoleTypeFieldNumber = 5;
  inline ::google::protobuf::int32 roletype() const;
  inline void set_roletype(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:protobuf.RankList_Ack.Rank)
 private:
  inline void set_has_playerid();
  inline void clear_has_playerid();
  inline void set_has_nickname();
  inline void clear_has_nickname();
  inline void set_has_level();
  inline void clear_has_level();
  inline void set_has_score();
  inline void clear_has_score();
  inline void set_has_roletype();
  inline void clear_has_roletype();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* nickname_;
  ::google::protobuf::int32 playerid_;
  ::google::protobuf::int32 level_;
  ::google::protobuf::int32 score_;
  ::google::protobuf::int32 roletype_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_RankList_5fAck_2eproto();
  friend void protobuf_AssignDesc_RankList_5fAck_2eproto();
  friend void protobuf_ShutdownFile_RankList_5fAck_2eproto();

  void InitAsDefaultInstance();
  static RankList_Ack_Rank* default_instance_;
};
// -------------------------------------------------------------------

class RankList_Ack : public ::google::protobuf::Message {
 public:
  RankList_Ack();
  virtual ~RankList_Ack();

  RankList_Ack(const RankList_Ack& from);

  inline RankList_Ack& operator=(const RankList_Ack& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RankList_Ack& default_instance();

  void Swap(RankList_Ack* other);

  // implements Message ----------------------------------------------

  RankList_Ack* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RankList_Ack& from);
  void MergeFrom(const RankList_Ack& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef RankList_Ack_Rank Rank;

  // accessors -------------------------------------------------------

  // optional string msgInfo = 1;
  inline bool has_msginfo() const;
  inline void clear_msginfo();
  static const int kMsgInfoFieldNumber = 1;
  inline const ::std::string& msginfo() const;
  inline void set_msginfo(const ::std::string& value);
  inline void set_msginfo(const char* value);
  inline void set_msginfo(const char* value, size_t size);
  inline ::std::string* mutable_msginfo();
  inline ::std::string* release_msginfo();
  inline void set_allocated_msginfo(::std::string* msginfo);

  // optional int32 scoreType = 2;
  inline bool has_scoretype() const;
  inline void clear_scoretype();
  static const int kScoreTypeFieldNumber = 2;
  inline ::google::protobuf::int32 scoretype() const;
  inline void set_scoretype(::google::protobuf::int32 value);

  // optional int32 rankType = 3;
  inline bool has_ranktype() const;
  inline void clear_ranktype();
  static const int kRankTypeFieldNumber = 3;
  inline ::google::protobuf::int32 ranktype() const;
  inline void set_ranktype(::google::protobuf::int32 value);

  // repeated .protobuf.RankList_Ack.Rank rankList = 4;
  inline int ranklist_size() const;
  inline void clear_ranklist();
  static const int kRankListFieldNumber = 4;
  inline const ::protobuf::RankList_Ack_Rank& ranklist(int index) const;
  inline ::protobuf::RankList_Ack_Rank* mutable_ranklist(int index);
  inline ::protobuf::RankList_Ack_Rank* add_ranklist();
  inline const ::google::protobuf::RepeatedPtrField< ::protobuf::RankList_Ack_Rank >&
      ranklist() const;
  inline ::google::protobuf::RepeatedPtrField< ::protobuf::RankList_Ack_Rank >*
      mutable_ranklist();

  // required int32 acktime = 5;
  inline bool has_acktime() const;
  inline void clear_acktime();
  static const int kAcktimeFieldNumber = 5;
  inline ::google::protobuf::int32 acktime() const;
  inline void set_acktime(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:protobuf.RankList_Ack)
 private:
  inline void set_has_msginfo();
  inline void clear_has_msginfo();
  inline void set_has_scoretype();
  inline void clear_has_scoretype();
  inline void set_has_ranktype();
  inline void clear_has_ranktype();
  inline void set_has_acktime();
  inline void clear_has_acktime();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* msginfo_;
  ::google::protobuf::int32 scoretype_;
  ::google::protobuf::int32 ranktype_;
  ::google::protobuf::RepeatedPtrField< ::protobuf::RankList_Ack_Rank > ranklist_;
  ::google::protobuf::int32 acktime_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_RankList_5fAck_2eproto();
  friend void protobuf_AssignDesc_RankList_5fAck_2eproto();
  friend void protobuf_ShutdownFile_RankList_5fAck_2eproto();

  void InitAsDefaultInstance();
  static RankList_Ack* default_instance_;
};
// ===================================================================


// ===================================================================

// RankList_Ack_Rank

// optional int32 playerId = 1;
inline bool RankList_Ack_Rank::has_playerid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RankList_Ack_Rank::set_has_playerid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RankList_Ack_Rank::clear_has_playerid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RankList_Ack_Rank::clear_playerid() {
  playerid_ = 0;
  clear_has_playerid();
}
inline ::google::protobuf::int32 RankList_Ack_Rank::playerid() const {
  return playerid_;
}
inline void RankList_Ack_Rank::set_playerid(::google::protobuf::int32 value) {
  set_has_playerid();
  playerid_ = value;
}

// optional string nickname = 2;
inline bool RankList_Ack_Rank::has_nickname() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RankList_Ack_Rank::set_has_nickname() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RankList_Ack_Rank::clear_has_nickname() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RankList_Ack_Rank::clear_nickname() {
  if (nickname_ != &::google::protobuf::internal::kEmptyString) {
    nickname_->clear();
  }
  clear_has_nickname();
}
inline const ::std::string& RankList_Ack_Rank::nickname() const {
  return *nickname_;
}
inline void RankList_Ack_Rank::set_nickname(const ::std::string& value) {
  set_has_nickname();
  if (nickname_ == &::google::protobuf::internal::kEmptyString) {
    nickname_ = new ::std::string;
  }
  nickname_->assign(value);
}
inline void RankList_Ack_Rank::set_nickname(const char* value) {
  set_has_nickname();
  if (nickname_ == &::google::protobuf::internal::kEmptyString) {
    nickname_ = new ::std::string;
  }
  nickname_->assign(value);
}
inline void RankList_Ack_Rank::set_nickname(const char* value, size_t size) {
  set_has_nickname();
  if (nickname_ == &::google::protobuf::internal::kEmptyString) {
    nickname_ = new ::std::string;
  }
  nickname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RankList_Ack_Rank::mutable_nickname() {
  set_has_nickname();
  if (nickname_ == &::google::protobuf::internal::kEmptyString) {
    nickname_ = new ::std::string;
  }
  return nickname_;
}
inline ::std::string* RankList_Ack_Rank::release_nickname() {
  clear_has_nickname();
  if (nickname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = nickname_;
    nickname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void RankList_Ack_Rank::set_allocated_nickname(::std::string* nickname) {
  if (nickname_ != &::google::protobuf::internal::kEmptyString) {
    delete nickname_;
  }
  if (nickname) {
    set_has_nickname();
    nickname_ = nickname;
  } else {
    clear_has_nickname();
    nickname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 level = 3;
inline bool RankList_Ack_Rank::has_level() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void RankList_Ack_Rank::set_has_level() {
  _has_bits_[0] |= 0x00000004u;
}
inline void RankList_Ack_Rank::clear_has_level() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void RankList_Ack_Rank::clear_level() {
  level_ = 0;
  clear_has_level();
}
inline ::google::protobuf::int32 RankList_Ack_Rank::level() const {
  return level_;
}
inline void RankList_Ack_Rank::set_level(::google::protobuf::int32 value) {
  set_has_level();
  level_ = value;
}

// optional int32 score = 4;
inline bool RankList_Ack_Rank::has_score() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void RankList_Ack_Rank::set_has_score() {
  _has_bits_[0] |= 0x00000008u;
}
inline void RankList_Ack_Rank::clear_has_score() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void RankList_Ack_Rank::clear_score() {
  score_ = 0;
  clear_has_score();
}
inline ::google::protobuf::int32 RankList_Ack_Rank::score() const {
  return score_;
}
inline void RankList_Ack_Rank::set_score(::google::protobuf::int32 value) {
  set_has_score();
  score_ = value;
}

// optional int32 roleType = 5;
inline bool RankList_Ack_Rank::has_roletype() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void RankList_Ack_Rank::set_has_roletype() {
  _has_bits_[0] |= 0x00000010u;
}
inline void RankList_Ack_Rank::clear_has_roletype() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void RankList_Ack_Rank::clear_roletype() {
  roletype_ = 0;
  clear_has_roletype();
}
inline ::google::protobuf::int32 RankList_Ack_Rank::roletype() const {
  return roletype_;
}
inline void RankList_Ack_Rank::set_roletype(::google::protobuf::int32 value) {
  set_has_roletype();
  roletype_ = value;
}

// -------------------------------------------------------------------

// RankList_Ack

// optional string msgInfo = 1;
inline bool RankList_Ack::has_msginfo() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RankList_Ack::set_has_msginfo() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RankList_Ack::clear_has_msginfo() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RankList_Ack::clear_msginfo() {
  if (msginfo_ != &::google::protobuf::internal::kEmptyString) {
    msginfo_->clear();
  }
  clear_has_msginfo();
}
inline const ::std::string& RankList_Ack::msginfo() const {
  return *msginfo_;
}
inline void RankList_Ack::set_msginfo(const ::std::string& value) {
  set_has_msginfo();
  if (msginfo_ == &::google::protobuf::internal::kEmptyString) {
    msginfo_ = new ::std::string;
  }
  msginfo_->assign(value);
}
inline void RankList_Ack::set_msginfo(const char* value) {
  set_has_msginfo();
  if (msginfo_ == &::google::protobuf::internal::kEmptyString) {
    msginfo_ = new ::std::string;
  }
  msginfo_->assign(value);
}
inline void RankList_Ack::set_msginfo(const char* value, size_t size) {
  set_has_msginfo();
  if (msginfo_ == &::google::protobuf::internal::kEmptyString) {
    msginfo_ = new ::std::string;
  }
  msginfo_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RankList_Ack::mutable_msginfo() {
  set_has_msginfo();
  if (msginfo_ == &::google::protobuf::internal::kEmptyString) {
    msginfo_ = new ::std::string;
  }
  return msginfo_;
}
inline ::std::string* RankList_Ack::release_msginfo() {
  clear_has_msginfo();
  if (msginfo_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = msginfo_;
    msginfo_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void RankList_Ack::set_allocated_msginfo(::std::string* msginfo) {
  if (msginfo_ != &::google::protobuf::internal::kEmptyString) {
    delete msginfo_;
  }
  if (msginfo) {
    set_has_msginfo();
    msginfo_ = msginfo;
  } else {
    clear_has_msginfo();
    msginfo_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 scoreType = 2;
inline bool RankList_Ack::has_scoretype() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RankList_Ack::set_has_scoretype() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RankList_Ack::clear_has_scoretype() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RankList_Ack::clear_scoretype() {
  scoretype_ = 0;
  clear_has_scoretype();
}
inline ::google::protobuf::int32 RankList_Ack::scoretype() const {
  return scoretype_;
}
inline void RankList_Ack::set_scoretype(::google::protobuf::int32 value) {
  set_has_scoretype();
  scoretype_ = value;
}

// optional int32 rankType = 3;
inline bool RankList_Ack::has_ranktype() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void RankList_Ack::set_has_ranktype() {
  _has_bits_[0] |= 0x00000004u;
}
inline void RankList_Ack::clear_has_ranktype() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void RankList_Ack::clear_ranktype() {
  ranktype_ = 0;
  clear_has_ranktype();
}
inline ::google::protobuf::int32 RankList_Ack::ranktype() const {
  return ranktype_;
}
inline void RankList_Ack::set_ranktype(::google::protobuf::int32 value) {
  set_has_ranktype();
  ranktype_ = value;
}

// repeated .protobuf.RankList_Ack.Rank rankList = 4;
inline int RankList_Ack::ranklist_size() const {
  return ranklist_.size();
}
inline void RankList_Ack::clear_ranklist() {
  ranklist_.Clear();
}
inline const ::protobuf::RankList_Ack_Rank& RankList_Ack::ranklist(int index) const {
  return ranklist_.Get(index);
}
inline ::protobuf::RankList_Ack_Rank* RankList_Ack::mutable_ranklist(int index) {
  return ranklist_.Mutable(index);
}
inline ::protobuf::RankList_Ack_Rank* RankList_Ack::add_ranklist() {
  return ranklist_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::protobuf::RankList_Ack_Rank >&
RankList_Ack::ranklist() const {
  return ranklist_;
}
inline ::google::protobuf::RepeatedPtrField< ::protobuf::RankList_Ack_Rank >*
RankList_Ack::mutable_ranklist() {
  return &ranklist_;
}

// required int32 acktime = 5;
inline bool RankList_Ack::has_acktime() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void RankList_Ack::set_has_acktime() {
  _has_bits_[0] |= 0x00000010u;
}
inline void RankList_Ack::clear_has_acktime() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void RankList_Ack::clear_acktime() {
  acktime_ = 0;
  clear_has_acktime();
}
inline ::google::protobuf::int32 RankList_Ack::acktime() const {
  return acktime_;
}
inline void RankList_Ack::set_acktime(::google::protobuf::int32 value) {
  set_has_acktime();
  acktime_ = value;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace protobuf

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_RankList_5fAck_2eproto__INCLUDED
