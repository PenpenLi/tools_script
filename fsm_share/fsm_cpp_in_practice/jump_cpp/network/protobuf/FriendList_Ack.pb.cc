// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: FriendList_Ack.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "FriendList_Ack.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace protobuf {

namespace {

const ::google::protobuf::Descriptor* FriendList_Ack_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FriendList_Ack_reflection_ = NULL;
const ::google::protobuf::Descriptor* FriendList_Ack_FriendList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FriendList_Ack_FriendList_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_FriendList_5fAck_2eproto() {
  protobuf_AddDesc_FriendList_5fAck_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "FriendList_Ack.proto");
  GOOGLE_CHECK(file != NULL);
  FriendList_Ack_descriptor_ = file->message_type(0);
  static const int FriendList_Ack_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FriendList_Ack, msginfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FriendList_Ack, friendlist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FriendList_Ack, pagetype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FriendList_Ack, score_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FriendList_Ack, rank_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FriendList_Ack, acktime_),
  };
  FriendList_Ack_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FriendList_Ack_descriptor_,
      FriendList_Ack::default_instance_,
      FriendList_Ack_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FriendList_Ack, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FriendList_Ack, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FriendList_Ack));
  FriendList_Ack_FriendList_descriptor_ = FriendList_Ack_descriptor_->nested_type(0);
  static const int FriendList_Ack_FriendList_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FriendList_Ack_FriendList, playerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FriendList_Ack_FriendList, nickname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FriendList_Ack_FriendList, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FriendList_Ack_FriendList, score_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FriendList_Ack_FriendList, distance_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FriendList_Ack_FriendList, issendheart_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FriendList_Ack_FriendList, roletype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FriendList_Ack_FriendList, helpnum_),
  };
  FriendList_Ack_FriendList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FriendList_Ack_FriendList_descriptor_,
      FriendList_Ack_FriendList::default_instance_,
      FriendList_Ack_FriendList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FriendList_Ack_FriendList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FriendList_Ack_FriendList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FriendList_Ack_FriendList));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_FriendList_5fAck_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FriendList_Ack_descriptor_, &FriendList_Ack::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FriendList_Ack_FriendList_descriptor_, &FriendList_Ack_FriendList::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_FriendList_5fAck_2eproto() {
  delete FriendList_Ack::default_instance_;
  delete FriendList_Ack_reflection_;
  delete FriendList_Ack_FriendList::default_instance_;
  delete FriendList_Ack_FriendList_reflection_;
}

void protobuf_AddDesc_FriendList_5fAck_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\024FriendList_Ack.proto\022\010protobuf\"\265\002\n\016Fri"
    "endList_Ack\022\017\n\007msgInfo\030\001 \001(\t\0227\n\nfriendLi"
    "st\030\002 \003(\0132#.protobuf.FriendList_Ack.Frien"
    "dList\022\020\n\010pageType\030\003 \001(\005\022\r\n\005score\030\004 \001(\005\022\014"
    "\n\004rank\030\005 \001(\005\022\017\n\007acktime\030\006 \001(\005\032\230\001\n\nFriend"
    "List\022\020\n\010playerId\030\001 \001(\005\022\020\n\010nickname\030\002 \001(\t"
    "\022\r\n\005level\030\003 \001(\005\022\r\n\005score\030\004 \001(\005\022\020\n\010distan"
    "ce\030\005 \001(\t\022\023\n\013isSendHeart\030\006 \001(\010\022\020\n\010roleTyp"
    "e\030\007 \001(\005\022\017\n\007helpNum\030\010 \001(\005", 344);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "FriendList_Ack.proto", &protobuf_RegisterTypes);
  FriendList_Ack::default_instance_ = new FriendList_Ack();
  FriendList_Ack_FriendList::default_instance_ = new FriendList_Ack_FriendList();
  FriendList_Ack::default_instance_->InitAsDefaultInstance();
  FriendList_Ack_FriendList::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_FriendList_5fAck_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_FriendList_5fAck_2eproto {
  StaticDescriptorInitializer_FriendList_5fAck_2eproto() {
    protobuf_AddDesc_FriendList_5fAck_2eproto();
  }
} static_descriptor_initializer_FriendList_5fAck_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int FriendList_Ack_FriendList::kPlayerIdFieldNumber;
const int FriendList_Ack_FriendList::kNicknameFieldNumber;
const int FriendList_Ack_FriendList::kLevelFieldNumber;
const int FriendList_Ack_FriendList::kScoreFieldNumber;
const int FriendList_Ack_FriendList::kDistanceFieldNumber;
const int FriendList_Ack_FriendList::kIsSendHeartFieldNumber;
const int FriendList_Ack_FriendList::kRoleTypeFieldNumber;
const int FriendList_Ack_FriendList::kHelpNumFieldNumber;
#endif  // !_MSC_VER

FriendList_Ack_FriendList::FriendList_Ack_FriendList()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FriendList_Ack_FriendList::InitAsDefaultInstance() {
}

FriendList_Ack_FriendList::FriendList_Ack_FriendList(const FriendList_Ack_FriendList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FriendList_Ack_FriendList::SharedCtor() {
  _cached_size_ = 0;
  playerid_ = 0;
  nickname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  level_ = 0;
  score_ = 0;
  distance_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  issendheart_ = false;
  roletype_ = 0;
  helpnum_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FriendList_Ack_FriendList::~FriendList_Ack_FriendList() {
  SharedDtor();
}

void FriendList_Ack_FriendList::SharedDtor() {
  if (nickname_ != &::google::protobuf::internal::kEmptyString) {
    delete nickname_;
  }
  if (distance_ != &::google::protobuf::internal::kEmptyString) {
    delete distance_;
  }
  if (this != default_instance_) {
  }
}

void FriendList_Ack_FriendList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FriendList_Ack_FriendList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FriendList_Ack_FriendList_descriptor_;
}

const FriendList_Ack_FriendList& FriendList_Ack_FriendList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_FriendList_5fAck_2eproto();
  return *default_instance_;
}

FriendList_Ack_FriendList* FriendList_Ack_FriendList::default_instance_ = NULL;

FriendList_Ack_FriendList* FriendList_Ack_FriendList::New() const {
  return new FriendList_Ack_FriendList;
}

void FriendList_Ack_FriendList::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    playerid_ = 0;
    if (has_nickname()) {
      if (nickname_ != &::google::protobuf::internal::kEmptyString) {
        nickname_->clear();
      }
    }
    level_ = 0;
    score_ = 0;
    if (has_distance()) {
      if (distance_ != &::google::protobuf::internal::kEmptyString) {
        distance_->clear();
      }
    }
    issendheart_ = false;
    roletype_ = 0;
    helpnum_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FriendList_Ack_FriendList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 playerId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &playerid_)));
          set_has_playerid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_nickname;
        break;
      }

      // optional string nickname = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_nickname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_nickname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->nickname().data(), this->nickname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_level;
        break;
      }

      // optional int32 level = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_score;
        break;
      }

      // optional int32 score = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_score:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &score_)));
          set_has_score();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_distance;
        break;
      }

      // optional string distance = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_distance:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_distance()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->distance().data(), this->distance().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_isSendHeart;
        break;
      }

      // optional bool isSendHeart = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isSendHeart:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &issendheart_)));
          set_has_issendheart();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_roleType;
        break;
      }

      // optional int32 roleType = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_roleType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &roletype_)));
          set_has_roletype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_helpNum;
        break;
      }

      // optional int32 helpNum = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_helpNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &helpnum_)));
          set_has_helpnum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FriendList_Ack_FriendList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 playerId = 1;
  if (has_playerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->playerid(), output);
  }

  // optional string nickname = 2;
  if (has_nickname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->nickname().data(), this->nickname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->nickname(), output);
  }

  // optional int32 level = 3;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->level(), output);
  }

  // optional int32 score = 4;
  if (has_score()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->score(), output);
  }

  // optional string distance = 5;
  if (has_distance()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->distance().data(), this->distance().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->distance(), output);
  }

  // optional bool isSendHeart = 6;
  if (has_issendheart()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->issendheart(), output);
  }

  // optional int32 roleType = 7;
  if (has_roletype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->roletype(), output);
  }

  // optional int32 helpNum = 8;
  if (has_helpnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->helpnum(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FriendList_Ack_FriendList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 playerId = 1;
  if (has_playerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->playerid(), target);
  }

  // optional string nickname = 2;
  if (has_nickname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->nickname().data(), this->nickname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->nickname(), target);
  }

  // optional int32 level = 3;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->level(), target);
  }

  // optional int32 score = 4;
  if (has_score()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->score(), target);
  }

  // optional string distance = 5;
  if (has_distance()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->distance().data(), this->distance().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->distance(), target);
  }

  // optional bool isSendHeart = 6;
  if (has_issendheart()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->issendheart(), target);
  }

  // optional int32 roleType = 7;
  if (has_roletype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->roletype(), target);
  }

  // optional int32 helpNum = 8;
  if (has_helpnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->helpnum(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FriendList_Ack_FriendList::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 playerId = 1;
    if (has_playerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->playerid());
    }

    // optional string nickname = 2;
    if (has_nickname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->nickname());
    }

    // optional int32 level = 3;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->level());
    }

    // optional int32 score = 4;
    if (has_score()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->score());
    }

    // optional string distance = 5;
    if (has_distance()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->distance());
    }

    // optional bool isSendHeart = 6;
    if (has_issendheart()) {
      total_size += 1 + 1;
    }

    // optional int32 roleType = 7;
    if (has_roletype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->roletype());
    }

    // optional int32 helpNum = 8;
    if (has_helpnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->helpnum());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FriendList_Ack_FriendList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FriendList_Ack_FriendList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FriendList_Ack_FriendList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FriendList_Ack_FriendList::MergeFrom(const FriendList_Ack_FriendList& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_playerid()) {
      set_playerid(from.playerid());
    }
    if (from.has_nickname()) {
      set_nickname(from.nickname());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_score()) {
      set_score(from.score());
    }
    if (from.has_distance()) {
      set_distance(from.distance());
    }
    if (from.has_issendheart()) {
      set_issendheart(from.issendheart());
    }
    if (from.has_roletype()) {
      set_roletype(from.roletype());
    }
    if (from.has_helpnum()) {
      set_helpnum(from.helpnum());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FriendList_Ack_FriendList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FriendList_Ack_FriendList::CopyFrom(const FriendList_Ack_FriendList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FriendList_Ack_FriendList::IsInitialized() const {

  return true;
}

void FriendList_Ack_FriendList::Swap(FriendList_Ack_FriendList* other) {
  if (other != this) {
    std::swap(playerid_, other->playerid_);
    std::swap(nickname_, other->nickname_);
    std::swap(level_, other->level_);
    std::swap(score_, other->score_);
    std::swap(distance_, other->distance_);
    std::swap(issendheart_, other->issendheart_);
    std::swap(roletype_, other->roletype_);
    std::swap(helpnum_, other->helpnum_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FriendList_Ack_FriendList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FriendList_Ack_FriendList_descriptor_;
  metadata.reflection = FriendList_Ack_FriendList_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int FriendList_Ack::kMsgInfoFieldNumber;
const int FriendList_Ack::kFriendListFieldNumber;
const int FriendList_Ack::kPageTypeFieldNumber;
const int FriendList_Ack::kScoreFieldNumber;
const int FriendList_Ack::kRankFieldNumber;
const int FriendList_Ack::kAcktimeFieldNumber;
#endif  // !_MSC_VER

FriendList_Ack::FriendList_Ack()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FriendList_Ack::InitAsDefaultInstance() {
}

FriendList_Ack::FriendList_Ack(const FriendList_Ack& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FriendList_Ack::SharedCtor() {
  _cached_size_ = 0;
  msginfo_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  pagetype_ = 0;
  score_ = 0;
  rank_ = 0;
  acktime_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FriendList_Ack::~FriendList_Ack() {
  SharedDtor();
}

void FriendList_Ack::SharedDtor() {
  if (msginfo_ != &::google::protobuf::internal::kEmptyString) {
    delete msginfo_;
  }
  if (this != default_instance_) {
  }
}

void FriendList_Ack::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FriendList_Ack::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FriendList_Ack_descriptor_;
}

const FriendList_Ack& FriendList_Ack::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_FriendList_5fAck_2eproto();
  return *default_instance_;
}

FriendList_Ack* FriendList_Ack::default_instance_ = NULL;

FriendList_Ack* FriendList_Ack::New() const {
  return new FriendList_Ack;
}

void FriendList_Ack::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_msginfo()) {
      if (msginfo_ != &::google::protobuf::internal::kEmptyString) {
        msginfo_->clear();
      }
    }
    pagetype_ = 0;
    score_ = 0;
    rank_ = 0;
    acktime_ = 0;
  }
  friendlist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FriendList_Ack::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string msgInfo = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msginfo()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->msginfo().data(), this->msginfo().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_friendList;
        break;
      }

      // repeated .protobuf.FriendList_Ack.FriendList friendList = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_friendList:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_friendlist()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_friendList;
        if (input->ExpectTag(24)) goto parse_pageType;
        break;
      }

      // optional int32 pageType = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pageType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pagetype_)));
          set_has_pagetype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_score;
        break;
      }

      // optional int32 score = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_score:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &score_)));
          set_has_score();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_rank;
        break;
      }

      // optional int32 rank = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rank:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rank_)));
          set_has_rank();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_acktime;
        break;
      }

      // optional int32 acktime = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_acktime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &acktime_)));
          set_has_acktime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FriendList_Ack::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string msgInfo = 1;
  if (has_msginfo()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msginfo().data(), this->msginfo().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->msginfo(), output);
  }

  // repeated .protobuf.FriendList_Ack.FriendList friendList = 2;
  for (int i = 0; i < this->friendlist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->friendlist(i), output);
  }

  // optional int32 pageType = 3;
  if (has_pagetype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->pagetype(), output);
  }

  // optional int32 score = 4;
  if (has_score()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->score(), output);
  }

  // optional int32 rank = 5;
  if (has_rank()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->rank(), output);
  }

  // optional int32 acktime = 6;
  if (has_acktime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->acktime(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FriendList_Ack::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string msgInfo = 1;
  if (has_msginfo()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msginfo().data(), this->msginfo().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->msginfo(), target);
  }

  // repeated .protobuf.FriendList_Ack.FriendList friendList = 2;
  for (int i = 0; i < this->friendlist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->friendlist(i), target);
  }

  // optional int32 pageType = 3;
  if (has_pagetype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->pagetype(), target);
  }

  // optional int32 score = 4;
  if (has_score()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->score(), target);
  }

  // optional int32 rank = 5;
  if (has_rank()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->rank(), target);
  }

  // optional int32 acktime = 6;
  if (has_acktime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->acktime(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FriendList_Ack::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string msgInfo = 1;
    if (has_msginfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->msginfo());
    }

    // optional int32 pageType = 3;
    if (has_pagetype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pagetype());
    }

    // optional int32 score = 4;
    if (has_score()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->score());
    }

    // optional int32 rank = 5;
    if (has_rank()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rank());
    }

    // optional int32 acktime = 6;
    if (has_acktime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->acktime());
    }

  }
  // repeated .protobuf.FriendList_Ack.FriendList friendList = 2;
  total_size += 1 * this->friendlist_size();
  for (int i = 0; i < this->friendlist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->friendlist(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FriendList_Ack::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FriendList_Ack* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FriendList_Ack*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FriendList_Ack::MergeFrom(const FriendList_Ack& from) {
  GOOGLE_CHECK_NE(&from, this);
  friendlist_.MergeFrom(from.friendlist_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msginfo()) {
      set_msginfo(from.msginfo());
    }
    if (from.has_pagetype()) {
      set_pagetype(from.pagetype());
    }
    if (from.has_score()) {
      set_score(from.score());
    }
    if (from.has_rank()) {
      set_rank(from.rank());
    }
    if (from.has_acktime()) {
      set_acktime(from.acktime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FriendList_Ack::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FriendList_Ack::CopyFrom(const FriendList_Ack& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FriendList_Ack::IsInitialized() const {

  return true;
}

void FriendList_Ack::Swap(FriendList_Ack* other) {
  if (other != this) {
    std::swap(msginfo_, other->msginfo_);
    friendlist_.Swap(&other->friendlist_);
    std::swap(pagetype_, other->pagetype_);
    std::swap(score_, other->score_);
    std::swap(rank_, other->rank_);
    std::swap(acktime_, other->acktime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FriendList_Ack::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FriendList_Ack_descriptor_;
  metadata.reflection = FriendList_Ack_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace protobuf

// @@protoc_insertion_point(global_scope)
