// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Gift_Req.proto

#ifndef PROTOBUF_Gift_5fReq_2eproto__INCLUDED
#define PROTOBUF_Gift_5fReq_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace protobuf {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_Gift_5fReq_2eproto();
void protobuf_AssignDesc_Gift_5fReq_2eproto();
void protobuf_ShutdownFile_Gift_5fReq_2eproto();

class Gift_Req;

// ===================================================================

class Gift_Req : public ::google::protobuf::Message {
 public:
  Gift_Req();
  virtual ~Gift_Req();

  Gift_Req(const Gift_Req& from);

  inline Gift_Req& operator=(const Gift_Req& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Gift_Req& default_instance();

  void Swap(Gift_Req* other);

  // implements Message ----------------------------------------------

  Gift_Req* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Gift_Req& from);
  void MergeFrom(const Gift_Req& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string token = 1;
  inline bool has_token() const;
  inline void clear_token();
  static const int kTokenFieldNumber = 1;
  inline const ::std::string& token() const;
  inline void set_token(const ::std::string& value);
  inline void set_token(const char* value);
  inline void set_token(const char* value, size_t size);
  inline ::std::string* mutable_token();
  inline ::std::string* release_token();
  inline void set_allocated_token(::std::string* token);

  // optional string giftid = 2;
  inline bool has_giftid() const;
  inline void clear_giftid();
  static const int kGiftidFieldNumber = 2;
  inline const ::std::string& giftid() const;
  inline void set_giftid(const ::std::string& value);
  inline void set_giftid(const char* value);
  inline void set_giftid(const char* value, size_t size);
  inline ::std::string* mutable_giftid();
  inline ::std::string* release_giftid();
  inline void set_allocated_giftid(::std::string* giftid);

  // @@protoc_insertion_point(class_scope:protobuf.Gift_Req)
 private:
  inline void set_has_token();
  inline void clear_has_token();
  inline void set_has_giftid();
  inline void clear_has_giftid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* token_;
  ::std::string* giftid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_Gift_5fReq_2eproto();
  friend void protobuf_AssignDesc_Gift_5fReq_2eproto();
  friend void protobuf_ShutdownFile_Gift_5fReq_2eproto();

  void InitAsDefaultInstance();
  static Gift_Req* default_instance_;
};
// ===================================================================


// ===================================================================

// Gift_Req

// optional string token = 1;
inline bool Gift_Req::has_token() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Gift_Req::set_has_token() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Gift_Req::clear_has_token() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Gift_Req::clear_token() {
  if (token_ != &::google::protobuf::internal::kEmptyString) {
    token_->clear();
  }
  clear_has_token();
}
inline const ::std::string& Gift_Req::token() const {
  return *token_;
}
inline void Gift_Req::set_token(const ::std::string& value) {
  set_has_token();
  if (token_ == &::google::protobuf::internal::kEmptyString) {
    token_ = new ::std::string;
  }
  token_->assign(value);
}
inline void Gift_Req::set_token(const char* value) {
  set_has_token();
  if (token_ == &::google::protobuf::internal::kEmptyString) {
    token_ = new ::std::string;
  }
  token_->assign(value);
}
inline void Gift_Req::set_token(const char* value, size_t size) {
  set_has_token();
  if (token_ == &::google::protobuf::internal::kEmptyString) {
    token_ = new ::std::string;
  }
  token_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Gift_Req::mutable_token() {
  set_has_token();
  if (token_ == &::google::protobuf::internal::kEmptyString) {
    token_ = new ::std::string;
  }
  return token_;
}
inline ::std::string* Gift_Req::release_token() {
  clear_has_token();
  if (token_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = token_;
    token_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Gift_Req::set_allocated_token(::std::string* token) {
  if (token_ != &::google::protobuf::internal::kEmptyString) {
    delete token_;
  }
  if (token) {
    set_has_token();
    token_ = token;
  } else {
    clear_has_token();
    token_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string giftid = 2;
inline bool Gift_Req::has_giftid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Gift_Req::set_has_giftid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Gift_Req::clear_has_giftid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Gift_Req::clear_giftid() {
  if (giftid_ != &::google::protobuf::internal::kEmptyString) {
    giftid_->clear();
  }
  clear_has_giftid();
}
inline const ::std::string& Gift_Req::giftid() const {
  return *giftid_;
}
inline void Gift_Req::set_giftid(const ::std::string& value) {
  set_has_giftid();
  if (giftid_ == &::google::protobuf::internal::kEmptyString) {
    giftid_ = new ::std::string;
  }
  giftid_->assign(value);
}
inline void Gift_Req::set_giftid(const char* value) {
  set_has_giftid();
  if (giftid_ == &::google::protobuf::internal::kEmptyString) {
    giftid_ = new ::std::string;
  }
  giftid_->assign(value);
}
inline void Gift_Req::set_giftid(const char* value, size_t size) {
  set_has_giftid();
  if (giftid_ == &::google::protobuf::internal::kEmptyString) {
    giftid_ = new ::std::string;
  }
  giftid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Gift_Req::mutable_giftid() {
  set_has_giftid();
  if (giftid_ == &::google::protobuf::internal::kEmptyString) {
    giftid_ = new ::std::string;
  }
  return giftid_;
}
inline ::std::string* Gift_Req::release_giftid() {
  clear_has_giftid();
  if (giftid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = giftid_;
    giftid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Gift_Req::set_allocated_giftid(::std::string* giftid) {
  if (giftid_ != &::google::protobuf::internal::kEmptyString) {
    delete giftid_;
  }
  if (giftid) {
    set_has_giftid();
    giftid_ = giftid;
  } else {
    clear_has_giftid();
    giftid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace protobuf

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_Gift_5fReq_2eproto__INCLUDED
