// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: FriendList_Ack.proto

#ifndef PROTOBUF_FriendList_5fAck_2eproto__INCLUDED
#define PROTOBUF_FriendList_5fAck_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace protobuf {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_FriendList_5fAck_2eproto();
void protobuf_AssignDesc_FriendList_5fAck_2eproto();
void protobuf_ShutdownFile_FriendList_5fAck_2eproto();

class FriendList_Ack;
class FriendList_Ack_FriendList;

// ===================================================================

class FriendList_Ack_FriendList : public ::google::protobuf::Message {
 public:
  FriendList_Ack_FriendList();
  virtual ~FriendList_Ack_FriendList();

  FriendList_Ack_FriendList(const FriendList_Ack_FriendList& from);

  inline FriendList_Ack_FriendList& operator=(const FriendList_Ack_FriendList& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FriendList_Ack_FriendList& default_instance();

  void Swap(FriendList_Ack_FriendList* other);

  // implements Message ----------------------------------------------

  FriendList_Ack_FriendList* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FriendList_Ack_FriendList& from);
  void MergeFrom(const FriendList_Ack_FriendList& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 playerId = 1;
  inline bool has_playerid() const;
  inline void clear_playerid();
  static const int kPlayerIdFieldNumber = 1;
  inline ::google::protobuf::int32 playerid() const;
  inline void set_playerid(::google::protobuf::int32 value);

  // optional string nickname = 2;
  inline bool has_nickname() const;
  inline void clear_nickname();
  static const int kNicknameFieldNumber = 2;
  inline const ::std::string& nickname() const;
  inline void set_nickname(const ::std::string& value);
  inline void set_nickname(const char* value);
  inline void set_nickname(const char* value, size_t size);
  inline ::std::string* mutable_nickname();
  inline ::std::string* release_nickname();
  inline void set_allocated_nickname(::std::string* nickname);

  // optional int32 level = 3;
  inline bool has_level() const;
  inline void clear_level();
  static const int kLevelFieldNumber = 3;
  inline ::google::protobuf::int32 level() const;
  inline void set_level(::google::protobuf::int32 value);

  // optional int32 score = 4;
  inline bool has_score() const;
  inline void clear_score();
  static const int kScoreFieldNumber = 4;
  inline ::google::protobuf::int32 score() const;
  inline void set_score(::google::protobuf::int32 value);

  // optional string distance = 5;
  inline bool has_distance() const;
  inline void clear_distance();
  static const int kDistanceFieldNumber = 5;
  inline const ::std::string& distance() const;
  inline void set_distance(const ::std::string& value);
  inline void set_distance(const char* value);
  inline void set_distance(const char* value, size_t size);
  inline ::std::string* mutable_distance();
  inline ::std::string* release_distance();
  inline void set_allocated_distance(::std::string* distance);

  // optional bool isSendHeart = 6;
  inline bool has_issendheart() const;
  inline void clear_issendheart();
  static const int kIsSendHeartFieldNumber = 6;
  inline bool issendheart() const;
  inline void set_issendheart(bool value);

  // optional int32 roleType = 7;
  inline bool has_roletype() const;
  inline void clear_roletype();
  static const int kRoleTypeFieldNumber = 7;
  inline ::google::protobuf::int32 roletype() const;
  inline void set_roletype(::google::protobuf::int32 value);

  // optional int32 helpNum = 8;
  inline bool has_helpnum() const;
  inline void clear_helpnum();
  static const int kHelpNumFieldNumber = 8;
  inline ::google::protobuf::int32 helpnum() const;
  inline void set_helpnum(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:protobuf.FriendList_Ack.FriendList)
 private:
  inline void set_has_playerid();
  inline void clear_has_playerid();
  inline void set_has_nickname();
  inline void clear_has_nickname();
  inline void set_has_level();
  inline void clear_has_level();
  inline void set_has_score();
  inline void clear_has_score();
  inline void set_has_distance();
  inline void clear_has_distance();
  inline void set_has_issendheart();
  inline void clear_has_issendheart();
  inline void set_has_roletype();
  inline void clear_has_roletype();
  inline void set_has_helpnum();
  inline void clear_has_helpnum();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* nickname_;
  ::google::protobuf::int32 playerid_;
  ::google::protobuf::int32 level_;
  ::std::string* distance_;
  ::google::protobuf::int32 score_;
  bool issendheart_;
  ::google::protobuf::int32 roletype_;
  ::google::protobuf::int32 helpnum_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(8 + 31) / 32];

  friend void  protobuf_AddDesc_FriendList_5fAck_2eproto();
  friend void protobuf_AssignDesc_FriendList_5fAck_2eproto();
  friend void protobuf_ShutdownFile_FriendList_5fAck_2eproto();

  void InitAsDefaultInstance();
  static FriendList_Ack_FriendList* default_instance_;
};
// -------------------------------------------------------------------

class FriendList_Ack : public ::google::protobuf::Message {
 public:
  FriendList_Ack();
  virtual ~FriendList_Ack();

  FriendList_Ack(const FriendList_Ack& from);

  inline FriendList_Ack& operator=(const FriendList_Ack& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FriendList_Ack& default_instance();

  void Swap(FriendList_Ack* other);

  // implements Message ----------------------------------------------

  FriendList_Ack* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FriendList_Ack& from);
  void MergeFrom(const FriendList_Ack& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef FriendList_Ack_FriendList FriendList;

  // accessors -------------------------------------------------------

  // optional string msgInfo = 1;
  inline bool has_msginfo() const;
  inline void clear_msginfo();
  static const int kMsgInfoFieldNumber = 1;
  inline const ::std::string& msginfo() const;
  inline void set_msginfo(const ::std::string& value);
  inline void set_msginfo(const char* value);
  inline void set_msginfo(const char* value, size_t size);
  inline ::std::string* mutable_msginfo();
  inline ::std::string* release_msginfo();
  inline void set_allocated_msginfo(::std::string* msginfo);

  // repeated .protobuf.FriendList_Ack.FriendList friendList = 2;
  inline int friendlist_size() const;
  inline void clear_friendlist();
  static const int kFriendListFieldNumber = 2;
  inline const ::protobuf::FriendList_Ack_FriendList& friendlist(int index) const;
  inline ::protobuf::FriendList_Ack_FriendList* mutable_friendlist(int index);
  inline ::protobuf::FriendList_Ack_FriendList* add_friendlist();
  inline const ::google::protobuf::RepeatedPtrField< ::protobuf::FriendList_Ack_FriendList >&
      friendlist() const;
  inline ::google::protobuf::RepeatedPtrField< ::protobuf::FriendList_Ack_FriendList >*
      mutable_friendlist();

  // optional int32 pageType = 3;
  inline bool has_pagetype() const;
  inline void clear_pagetype();
  static const int kPageTypeFieldNumber = 3;
  inline ::google::protobuf::int32 pagetype() const;
  inline void set_pagetype(::google::protobuf::int32 value);

  // optional int32 score = 4;
  inline bool has_score() const;
  inline void clear_score();
  static const int kScoreFieldNumber = 4;
  inline ::google::protobuf::int32 score() const;
  inline void set_score(::google::protobuf::int32 value);

  // optional int32 rank = 5;
  inline bool has_rank() const;
  inline void clear_rank();
  static const int kRankFieldNumber = 5;
  inline ::google::protobuf::int32 rank() const;
  inline void set_rank(::google::protobuf::int32 value);

  // optional int32 acktime = 6;
  inline bool has_acktime() const;
  inline void clear_acktime();
  static const int kAcktimeFieldNumber = 6;
  inline ::google::protobuf::int32 acktime() const;
  inline void set_acktime(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:protobuf.FriendList_Ack)
 private:
  inline void set_has_msginfo();
  inline void clear_has_msginfo();
  inline void set_has_pagetype();
  inline void clear_has_pagetype();
  inline void set_has_score();
  inline void clear_has_score();
  inline void set_has_rank();
  inline void clear_has_rank();
  inline void set_has_acktime();
  inline void clear_has_acktime();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* msginfo_;
  ::google::protobuf::RepeatedPtrField< ::protobuf::FriendList_Ack_FriendList > friendlist_;
  ::google::protobuf::int32 pagetype_;
  ::google::protobuf::int32 score_;
  ::google::protobuf::int32 rank_;
  ::google::protobuf::int32 acktime_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];

  friend void  protobuf_AddDesc_FriendList_5fAck_2eproto();
  friend void protobuf_AssignDesc_FriendList_5fAck_2eproto();
  friend void protobuf_ShutdownFile_FriendList_5fAck_2eproto();

  void InitAsDefaultInstance();
  static FriendList_Ack* default_instance_;
};
// ===================================================================


// ===================================================================

// FriendList_Ack_FriendList

// optional int32 playerId = 1;
inline bool FriendList_Ack_FriendList::has_playerid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FriendList_Ack_FriendList::set_has_playerid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FriendList_Ack_FriendList::clear_has_playerid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FriendList_Ack_FriendList::clear_playerid() {
  playerid_ = 0;
  clear_has_playerid();
}
inline ::google::protobuf::int32 FriendList_Ack_FriendList::playerid() const {
  return playerid_;
}
inline void FriendList_Ack_FriendList::set_playerid(::google::protobuf::int32 value) {
  set_has_playerid();
  playerid_ = value;
}

// optional string nickname = 2;
inline bool FriendList_Ack_FriendList::has_nickname() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void FriendList_Ack_FriendList::set_has_nickname() {
  _has_bits_[0] |= 0x00000002u;
}
inline void FriendList_Ack_FriendList::clear_has_nickname() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void FriendList_Ack_FriendList::clear_nickname() {
  if (nickname_ != &::google::protobuf::internal::kEmptyString) {
    nickname_->clear();
  }
  clear_has_nickname();
}
inline const ::std::string& FriendList_Ack_FriendList::nickname() const {
  return *nickname_;
}
inline void FriendList_Ack_FriendList::set_nickname(const ::std::string& value) {
  set_has_nickname();
  if (nickname_ == &::google::protobuf::internal::kEmptyString) {
    nickname_ = new ::std::string;
  }
  nickname_->assign(value);
}
inline void FriendList_Ack_FriendList::set_nickname(const char* value) {
  set_has_nickname();
  if (nickname_ == &::google::protobuf::internal::kEmptyString) {
    nickname_ = new ::std::string;
  }
  nickname_->assign(value);
}
inline void FriendList_Ack_FriendList::set_nickname(const char* value, size_t size) {
  set_has_nickname();
  if (nickname_ == &::google::protobuf::internal::kEmptyString) {
    nickname_ = new ::std::string;
  }
  nickname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* FriendList_Ack_FriendList::mutable_nickname() {
  set_has_nickname();
  if (nickname_ == &::google::protobuf::internal::kEmptyString) {
    nickname_ = new ::std::string;
  }
  return nickname_;
}
inline ::std::string* FriendList_Ack_FriendList::release_nickname() {
  clear_has_nickname();
  if (nickname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = nickname_;
    nickname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void FriendList_Ack_FriendList::set_allocated_nickname(::std::string* nickname) {
  if (nickname_ != &::google::protobuf::internal::kEmptyString) {
    delete nickname_;
  }
  if (nickname) {
    set_has_nickname();
    nickname_ = nickname;
  } else {
    clear_has_nickname();
    nickname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 level = 3;
inline bool FriendList_Ack_FriendList::has_level() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void FriendList_Ack_FriendList::set_has_level() {
  _has_bits_[0] |= 0x00000004u;
}
inline void FriendList_Ack_FriendList::clear_has_level() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void FriendList_Ack_FriendList::clear_level() {
  level_ = 0;
  clear_has_level();
}
inline ::google::protobuf::int32 FriendList_Ack_FriendList::level() const {
  return level_;
}
inline void FriendList_Ack_FriendList::set_level(::google::protobuf::int32 value) {
  set_has_level();
  level_ = value;
}

// optional int32 score = 4;
inline bool FriendList_Ack_FriendList::has_score() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void FriendList_Ack_FriendList::set_has_score() {
  _has_bits_[0] |= 0x00000008u;
}
inline void FriendList_Ack_FriendList::clear_has_score() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void FriendList_Ack_FriendList::clear_score() {
  score_ = 0;
  clear_has_score();
}
inline ::google::protobuf::int32 FriendList_Ack_FriendList::score() const {
  return score_;
}
inline void FriendList_Ack_FriendList::set_score(::google::protobuf::int32 value) {
  set_has_score();
  score_ = value;
}

// optional string distance = 5;
inline bool FriendList_Ack_FriendList::has_distance() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void FriendList_Ack_FriendList::set_has_distance() {
  _has_bits_[0] |= 0x00000010u;
}
inline void FriendList_Ack_FriendList::clear_has_distance() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void FriendList_Ack_FriendList::clear_distance() {
  if (distance_ != &::google::protobuf::internal::kEmptyString) {
    distance_->clear();
  }
  clear_has_distance();
}
inline const ::std::string& FriendList_Ack_FriendList::distance() const {
  return *distance_;
}
inline void FriendList_Ack_FriendList::set_distance(const ::std::string& value) {
  set_has_distance();
  if (distance_ == &::google::protobuf::internal::kEmptyString) {
    distance_ = new ::std::string;
  }
  distance_->assign(value);
}
inline void FriendList_Ack_FriendList::set_distance(const char* value) {
  set_has_distance();
  if (distance_ == &::google::protobuf::internal::kEmptyString) {
    distance_ = new ::std::string;
  }
  distance_->assign(value);
}
inline void FriendList_Ack_FriendList::set_distance(const char* value, size_t size) {
  set_has_distance();
  if (distance_ == &::google::protobuf::internal::kEmptyString) {
    distance_ = new ::std::string;
  }
  distance_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* FriendList_Ack_FriendList::mutable_distance() {
  set_has_distance();
  if (distance_ == &::google::protobuf::internal::kEmptyString) {
    distance_ = new ::std::string;
  }
  return distance_;
}
inline ::std::string* FriendList_Ack_FriendList::release_distance() {
  clear_has_distance();
  if (distance_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = distance_;
    distance_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void FriendList_Ack_FriendList::set_allocated_distance(::std::string* distance) {
  if (distance_ != &::google::protobuf::internal::kEmptyString) {
    delete distance_;
  }
  if (distance) {
    set_has_distance();
    distance_ = distance;
  } else {
    clear_has_distance();
    distance_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional bool isSendHeart = 6;
inline bool FriendList_Ack_FriendList::has_issendheart() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void FriendList_Ack_FriendList::set_has_issendheart() {
  _has_bits_[0] |= 0x00000020u;
}
inline void FriendList_Ack_FriendList::clear_has_issendheart() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void FriendList_Ack_FriendList::clear_issendheart() {
  issendheart_ = false;
  clear_has_issendheart();
}
inline bool FriendList_Ack_FriendList::issendheart() const {
  return issendheart_;
}
inline void FriendList_Ack_FriendList::set_issendheart(bool value) {
  set_has_issendheart();
  issendheart_ = value;
}

// optional int32 roleType = 7;
inline bool FriendList_Ack_FriendList::has_roletype() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void FriendList_Ack_FriendList::set_has_roletype() {
  _has_bits_[0] |= 0x00000040u;
}
inline void FriendList_Ack_FriendList::clear_has_roletype() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void FriendList_Ack_FriendList::clear_roletype() {
  roletype_ = 0;
  clear_has_roletype();
}
inline ::google::protobuf::int32 FriendList_Ack_FriendList::roletype() const {
  return roletype_;
}
inline void FriendList_Ack_FriendList::set_roletype(::google::protobuf::int32 value) {
  set_has_roletype();
  roletype_ = value;
}

// optional int32 helpNum = 8;
inline bool FriendList_Ack_FriendList::has_helpnum() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void FriendList_Ack_FriendList::set_has_helpnum() {
  _has_bits_[0] |= 0x00000080u;
}
inline void FriendList_Ack_FriendList::clear_has_helpnum() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void FriendList_Ack_FriendList::clear_helpnum() {
  helpnum_ = 0;
  clear_has_helpnum();
}
inline ::google::protobuf::int32 FriendList_Ack_FriendList::helpnum() const {
  return helpnum_;
}
inline void FriendList_Ack_FriendList::set_helpnum(::google::protobuf::int32 value) {
  set_has_helpnum();
  helpnum_ = value;
}

// -------------------------------------------------------------------

// FriendList_Ack

// optional string msgInfo = 1;
inline bool FriendList_Ack::has_msginfo() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FriendList_Ack::set_has_msginfo() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FriendList_Ack::clear_has_msginfo() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FriendList_Ack::clear_msginfo() {
  if (msginfo_ != &::google::protobuf::internal::kEmptyString) {
    msginfo_->clear();
  }
  clear_has_msginfo();
}
inline const ::std::string& FriendList_Ack::msginfo() const {
  return *msginfo_;
}
inline void FriendList_Ack::set_msginfo(const ::std::string& value) {
  set_has_msginfo();
  if (msginfo_ == &::google::protobuf::internal::kEmptyString) {
    msginfo_ = new ::std::string;
  }
  msginfo_->assign(value);
}
inline void FriendList_Ack::set_msginfo(const char* value) {
  set_has_msginfo();
  if (msginfo_ == &::google::protobuf::internal::kEmptyString) {
    msginfo_ = new ::std::string;
  }
  msginfo_->assign(value);
}
inline void FriendList_Ack::set_msginfo(const char* value, size_t size) {
  set_has_msginfo();
  if (msginfo_ == &::google::protobuf::internal::kEmptyString) {
    msginfo_ = new ::std::string;
  }
  msginfo_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* FriendList_Ack::mutable_msginfo() {
  set_has_msginfo();
  if (msginfo_ == &::google::protobuf::internal::kEmptyString) {
    msginfo_ = new ::std::string;
  }
  return msginfo_;
}
inline ::std::string* FriendList_Ack::release_msginfo() {
  clear_has_msginfo();
  if (msginfo_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = msginfo_;
    msginfo_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void FriendList_Ack::set_allocated_msginfo(::std::string* msginfo) {
  if (msginfo_ != &::google::protobuf::internal::kEmptyString) {
    delete msginfo_;
  }
  if (msginfo) {
    set_has_msginfo();
    msginfo_ = msginfo;
  } else {
    clear_has_msginfo();
    msginfo_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// repeated .protobuf.FriendList_Ack.FriendList friendList = 2;
inline int FriendList_Ack::friendlist_size() const {
  return friendlist_.size();
}
inline void FriendList_Ack::clear_friendlist() {
  friendlist_.Clear();
}
inline const ::protobuf::FriendList_Ack_FriendList& FriendList_Ack::friendlist(int index) const {
  return friendlist_.Get(index);
}
inline ::protobuf::FriendList_Ack_FriendList* FriendList_Ack::mutable_friendlist(int index) {
  return friendlist_.Mutable(index);
}
inline ::protobuf::FriendList_Ack_FriendList* FriendList_Ack::add_friendlist() {
  return friendlist_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::protobuf::FriendList_Ack_FriendList >&
FriendList_Ack::friendlist() const {
  return friendlist_;
}
inline ::google::protobuf::RepeatedPtrField< ::protobuf::FriendList_Ack_FriendList >*
FriendList_Ack::mutable_friendlist() {
  return &friendlist_;
}

// optional int32 pageType = 3;
inline bool FriendList_Ack::has_pagetype() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void FriendList_Ack::set_has_pagetype() {
  _has_bits_[0] |= 0x00000004u;
}
inline void FriendList_Ack::clear_has_pagetype() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void FriendList_Ack::clear_pagetype() {
  pagetype_ = 0;
  clear_has_pagetype();
}
inline ::google::protobuf::int32 FriendList_Ack::pagetype() const {
  return pagetype_;
}
inline void FriendList_Ack::set_pagetype(::google::protobuf::int32 value) {
  set_has_pagetype();
  pagetype_ = value;
}

// optional int32 score = 4;
inline bool FriendList_Ack::has_score() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void FriendList_Ack::set_has_score() {
  _has_bits_[0] |= 0x00000008u;
}
inline void FriendList_Ack::clear_has_score() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void FriendList_Ack::clear_score() {
  score_ = 0;
  clear_has_score();
}
inline ::google::protobuf::int32 FriendList_Ack::score() const {
  return score_;
}
inline void FriendList_Ack::set_score(::google::protobuf::int32 value) {
  set_has_score();
  score_ = value;
}

// optional int32 rank = 5;
inline bool FriendList_Ack::has_rank() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void FriendList_Ack::set_has_rank() {
  _has_bits_[0] |= 0x00000010u;
}
inline void FriendList_Ack::clear_has_rank() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void FriendList_Ack::clear_rank() {
  rank_ = 0;
  clear_has_rank();
}
inline ::google::protobuf::int32 FriendList_Ack::rank() const {
  return rank_;
}
inline void FriendList_Ack::set_rank(::google::protobuf::int32 value) {
  set_has_rank();
  rank_ = value;
}

// optional int32 acktime = 6;
inline bool FriendList_Ack::has_acktime() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void FriendList_Ack::set_has_acktime() {
  _has_bits_[0] |= 0x00000020u;
}
inline void FriendList_Ack::clear_has_acktime() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void FriendList_Ack::clear_acktime() {
  acktime_ = 0;
  clear_has_acktime();
}
inline ::google::protobuf::int32 FriendList_Ack::acktime() const {
  return acktime_;
}
inline void FriendList_Ack::set_acktime(::google::protobuf::int32 value) {
  set_has_acktime();
  acktime_ = value;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace protobuf

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_FriendList_5fAck_2eproto__INCLUDED
