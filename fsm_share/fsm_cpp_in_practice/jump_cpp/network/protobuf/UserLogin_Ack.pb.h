// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: UserLogin_Ack.proto

#ifndef PROTOBUF_UserLogin_5fAck_2eproto__INCLUDED
#define PROTOBUF_UserLogin_5fAck_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace protobuf {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_UserLogin_5fAck_2eproto();
void protobuf_AssignDesc_UserLogin_5fAck_2eproto();
void protobuf_ShutdownFile_UserLogin_5fAck_2eproto();

class UserLogin_Ack;

// ===================================================================

class UserLogin_Ack : public ::google::protobuf::Message {
 public:
  UserLogin_Ack();
  virtual ~UserLogin_Ack();

  UserLogin_Ack(const UserLogin_Ack& from);

  inline UserLogin_Ack& operator=(const UserLogin_Ack& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const UserLogin_Ack& default_instance();

  void Swap(UserLogin_Ack* other);

  // implements Message ----------------------------------------------

  UserLogin_Ack* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const UserLogin_Ack& from);
  void MergeFrom(const UserLogin_Ack& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string msgInfo = 1;
  inline bool has_msginfo() const;
  inline void clear_msginfo();
  static const int kMsgInfoFieldNumber = 1;
  inline const ::std::string& msginfo() const;
  inline void set_msginfo(const ::std::string& value);
  inline void set_msginfo(const char* value);
  inline void set_msginfo(const char* value, size_t size);
  inline ::std::string* mutable_msginfo();
  inline ::std::string* release_msginfo();
  inline void set_allocated_msginfo(::std::string* msginfo);

  // optional string username = 2;
  inline bool has_username() const;
  inline void clear_username();
  static const int kUsernameFieldNumber = 2;
  inline const ::std::string& username() const;
  inline void set_username(const ::std::string& value);
  inline void set_username(const char* value);
  inline void set_username(const char* value, size_t size);
  inline ::std::string* mutable_username();
  inline ::std::string* release_username();
  inline void set_allocated_username(::std::string* username);

  // optional string nickname = 3;
  inline bool has_nickname() const;
  inline void clear_nickname();
  static const int kNicknameFieldNumber = 3;
  inline const ::std::string& nickname() const;
  inline void set_nickname(const ::std::string& value);
  inline void set_nickname(const char* value);
  inline void set_nickname(const char* value, size_t size);
  inline ::std::string* mutable_nickname();
  inline ::std::string* release_nickname();
  inline void set_allocated_nickname(::std::string* nickname);

  // optional int32 level = 4;
  inline bool has_level() const;
  inline void clear_level();
  static const int kLevelFieldNumber = 4;
  inline ::google::protobuf::int32 level() const;
  inline void set_level(::google::protobuf::int32 value);

  // optional int32 star = 5;
  inline bool has_star() const;
  inline void clear_star();
  static const int kStarFieldNumber = 5;
  inline ::google::protobuf::int32 star() const;
  inline void set_star(::google::protobuf::int32 value);

  // optional int32 coin = 6;
  inline bool has_coin() const;
  inline void clear_coin();
  static const int kCoinFieldNumber = 6;
  inline ::google::protobuf::int32 coin() const;
  inline void set_coin(::google::protobuf::int32 value);

  // optional int32 diamond = 7;
  inline bool has_diamond() const;
  inline void clear_diamond();
  static const int kDiamondFieldNumber = 7;
  inline ::google::protobuf::int32 diamond() const;
  inline void set_diamond(::google::protobuf::int32 value);

  // optional int32 helpCount = 8;
  inline bool has_helpcount() const;
  inline void clear_helpcount();
  static const int kHelpCountFieldNumber = 8;
  inline ::google::protobuf::int32 helpcount() const;
  inline void set_helpcount(::google::protobuf::int32 value);

  // optional int32 roleType = 9;
  inline bool has_roletype() const;
  inline void clear_roletype();
  static const int kRoleTypeFieldNumber = 9;
  inline ::google::protobuf::int32 roletype() const;
  inline void set_roletype(::google::protobuf::int32 value);

  // optional int32 mailCount = 10;
  inline bool has_mailcount() const;
  inline void clear_mailcount();
  static const int kMailCountFieldNumber = 10;
  inline ::google::protobuf::int32 mailcount() const;
  inline void set_mailcount(::google::protobuf::int32 value);

  // optional int32 weekScore = 11;
  inline bool has_weekscore() const;
  inline void clear_weekscore();
  static const int kWeekScoreFieldNumber = 11;
  inline ::google::protobuf::int32 weekscore() const;
  inline void set_weekscore(::google::protobuf::int32 value);

  // optional int32 score = 12;
  inline bool has_score() const;
  inline void clear_score();
  static const int kScoreFieldNumber = 12;
  inline ::google::protobuf::int32 score() const;
  inline void set_score(::google::protobuf::int32 value);

  // optional int32 time = 13;
  inline bool has_time() const;
  inline void clear_time();
  static const int kTimeFieldNumber = 13;
  inline ::google::protobuf::int32 time() const;
  inline void set_time(::google::protobuf::int32 value);

  // optional string content = 14;
  inline bool has_content() const;
  inline void clear_content();
  static const int kContentFieldNumber = 14;
  inline const ::std::string& content() const;
  inline void set_content(const ::std::string& value);
  inline void set_content(const char* value);
  inline void set_content(const char* value, size_t size);
  inline ::std::string* mutable_content();
  inline ::std::string* release_content();
  inline void set_allocated_content(::std::string* content);

  // optional string imgPath = 15;
  inline bool has_imgpath() const;
  inline void clear_imgpath();
  static const int kImgPathFieldNumber = 15;
  inline const ::std::string& imgpath() const;
  inline void set_imgpath(const ::std::string& value);
  inline void set_imgpath(const char* value);
  inline void set_imgpath(const char* value, size_t size);
  inline ::std::string* mutable_imgpath();
  inline ::std::string* release_imgpath();
  inline void set_allocated_imgpath(::std::string* imgpath);

  // optional int32 avtiveCount = 16;
  inline bool has_avtivecount() const;
  inline void clear_avtivecount();
  static const int kAvtiveCountFieldNumber = 16;
  inline ::google::protobuf::int32 avtivecount() const;
  inline void set_avtivecount(::google::protobuf::int32 value);

  // optional bool helpInc = 17;
  inline bool has_helpinc() const;
  inline void clear_helpinc();
  static const int kHelpIncFieldNumber = 17;
  inline bool helpinc() const;
  inline void set_helpinc(bool value);

  // optional int32 bgmInc = 18;
  inline bool has_bgminc() const;
  inline void clear_bgminc();
  static const int kBgmIncFieldNumber = 18;
  inline ::google::protobuf::int32 bgminc() const;
  inline void set_bgminc(::google::protobuf::int32 value);

  // optional int32 soundInc = 19;
  inline bool has_soundinc() const;
  inline void clear_soundinc();
  static const int kSoundIncFieldNumber = 19;
  inline ::google::protobuf::int32 soundinc() const;
  inline void set_soundinc(::google::protobuf::int32 value);

  // optional int32 sensitivityInc = 20;
  inline bool has_sensitivityinc() const;
  inline void clear_sensitivityinc();
  static const int kSensitivityIncFieldNumber = 20;
  inline ::google::protobuf::int32 sensitivityinc() const;
  inline void set_sensitivityinc(::google::protobuf::int32 value);

  // optional int32 loginCount = 21;
  inline bool has_logincount() const;
  inline void clear_logincount();
  static const int kLoginCountFieldNumber = 21;
  inline ::google::protobuf::int32 logincount() const;
  inline void set_logincount(::google::protobuf::int32 value);

  // optional int32 loginCountTotal = 22;
  inline bool has_logincounttotal() const;
  inline void clear_logincounttotal();
  static const int kLoginCountTotalFieldNumber = 22;
  inline ::google::protobuf::int32 logincounttotal() const;
  inline void set_logincounttotal(::google::protobuf::int32 value);

  // optional string token = 23;
  inline bool has_token() const;
  inline void clear_token();
  static const int kTokenFieldNumber = 23;
  inline const ::std::string& token() const;
  inline void set_token(const ::std::string& value);
  inline void set_token(const char* value);
  inline void set_token(const char* value, size_t size);
  inline ::std::string* mutable_token();
  inline ::std::string* release_token();
  inline void set_allocated_token(::std::string* token);

  // optional int32 playerId = 24;
  inline bool has_playerid() const;
  inline void clear_playerid();
  static const int kPlayerIdFieldNumber = 24;
  inline ::google::protobuf::int32 playerid() const;
  inline void set_playerid(::google::protobuf::int32 value);

  // optional int32 stageId = 25;
  inline bool has_stageid() const;
  inline void clear_stageid();
  static const int kStageIdFieldNumber = 25;
  inline ::google::protobuf::int32 stageid() const;
  inline void set_stageid(::google::protobuf::int32 value);

  // optional int32 count = 26;
  inline bool has_count() const;
  inline void clear_count();
  static const int kCountFieldNumber = 26;
  inline ::google::protobuf::int32 count() const;
  inline void set_count(::google::protobuf::int32 value);

  // required int32 acktime = 27;
  inline bool has_acktime() const;
  inline void clear_acktime();
  static const int kAcktimeFieldNumber = 27;
  inline ::google::protobuf::int32 acktime() const;
  inline void set_acktime(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:protobuf.UserLogin_Ack)
 private:
  inline void set_has_msginfo();
  inline void clear_has_msginfo();
  inline void set_has_username();
  inline void clear_has_username();
  inline void set_has_nickname();
  inline void clear_has_nickname();
  inline void set_has_level();
  inline void clear_has_level();
  inline void set_has_star();
  inline void clear_has_star();
  inline void set_has_coin();
  inline void clear_has_coin();
  inline void set_has_diamond();
  inline void clear_has_diamond();
  inline void set_has_helpcount();
  inline void clear_has_helpcount();
  inline void set_has_roletype();
  inline void clear_has_roletype();
  inline void set_has_mailcount();
  inline void clear_has_mailcount();
  inline void set_has_weekscore();
  inline void clear_has_weekscore();
  inline void set_has_score();
  inline void clear_has_score();
  inline void set_has_time();
  inline void clear_has_time();
  inline void set_has_content();
  inline void clear_has_content();
  inline void set_has_imgpath();
  inline void clear_has_imgpath();
  inline void set_has_avtivecount();
  inline void clear_has_avtivecount();
  inline void set_has_helpinc();
  inline void clear_has_helpinc();
  inline void set_has_bgminc();
  inline void clear_has_bgminc();
  inline void set_has_soundinc();
  inline void clear_has_soundinc();
  inline void set_has_sensitivityinc();
  inline void clear_has_sensitivityinc();
  inline void set_has_logincount();
  inline void clear_has_logincount();
  inline void set_has_logincounttotal();
  inline void clear_has_logincounttotal();
  inline void set_has_token();
  inline void clear_has_token();
  inline void set_has_playerid();
  inline void clear_has_playerid();
  inline void set_has_stageid();
  inline void clear_has_stageid();
  inline void set_has_count();
  inline void clear_has_count();
  inline void set_has_acktime();
  inline void clear_has_acktime();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* msginfo_;
  ::std::string* username_;
  ::std::string* nickname_;
  ::google::protobuf::int32 level_;
  ::google::protobuf::int32 star_;
  ::google::protobuf::int32 coin_;
  ::google::protobuf::int32 diamond_;
  ::google::protobuf::int32 helpcount_;
  ::google::protobuf::int32 roletype_;
  ::google::protobuf::int32 mailcount_;
  ::google::protobuf::int32 weekscore_;
  ::google::protobuf::int32 score_;
  ::google::protobuf::int32 time_;
  ::std::string* content_;
  ::std::string* imgpath_;
  ::google::protobuf::int32 avtivecount_;
  bool helpinc_;
  ::google::protobuf::int32 bgminc_;
  ::google::protobuf::int32 soundinc_;
  ::google::protobuf::int32 sensitivityinc_;
  ::google::protobuf::int32 logincount_;
  ::std::string* token_;
  ::google::protobuf::int32 logincounttotal_;
  ::google::protobuf::int32 playerid_;
  ::google::protobuf::int32 stageid_;
  ::google::protobuf::int32 count_;
  ::google::protobuf::int32 acktime_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(27 + 31) / 32];

  friend void  protobuf_AddDesc_UserLogin_5fAck_2eproto();
  friend void protobuf_AssignDesc_UserLogin_5fAck_2eproto();
  friend void protobuf_ShutdownFile_UserLogin_5fAck_2eproto();

  void InitAsDefaultInstance();
  static UserLogin_Ack* default_instance_;
};
// ===================================================================


// ===================================================================

// UserLogin_Ack

// optional string msgInfo = 1;
inline bool UserLogin_Ack::has_msginfo() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void UserLogin_Ack::set_has_msginfo() {
  _has_bits_[0] |= 0x00000001u;
}
inline void UserLogin_Ack::clear_has_msginfo() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void UserLogin_Ack::clear_msginfo() {
  if (msginfo_ != &::google::protobuf::internal::kEmptyString) {
    msginfo_->clear();
  }
  clear_has_msginfo();
}
inline const ::std::string& UserLogin_Ack::msginfo() const {
  return *msginfo_;
}
inline void UserLogin_Ack::set_msginfo(const ::std::string& value) {
  set_has_msginfo();
  if (msginfo_ == &::google::protobuf::internal::kEmptyString) {
    msginfo_ = new ::std::string;
  }
  msginfo_->assign(value);
}
inline void UserLogin_Ack::set_msginfo(const char* value) {
  set_has_msginfo();
  if (msginfo_ == &::google::protobuf::internal::kEmptyString) {
    msginfo_ = new ::std::string;
  }
  msginfo_->assign(value);
}
inline void UserLogin_Ack::set_msginfo(const char* value, size_t size) {
  set_has_msginfo();
  if (msginfo_ == &::google::protobuf::internal::kEmptyString) {
    msginfo_ = new ::std::string;
  }
  msginfo_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* UserLogin_Ack::mutable_msginfo() {
  set_has_msginfo();
  if (msginfo_ == &::google::protobuf::internal::kEmptyString) {
    msginfo_ = new ::std::string;
  }
  return msginfo_;
}
inline ::std::string* UserLogin_Ack::release_msginfo() {
  clear_has_msginfo();
  if (msginfo_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = msginfo_;
    msginfo_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void UserLogin_Ack::set_allocated_msginfo(::std::string* msginfo) {
  if (msginfo_ != &::google::protobuf::internal::kEmptyString) {
    delete msginfo_;
  }
  if (msginfo) {
    set_has_msginfo();
    msginfo_ = msginfo;
  } else {
    clear_has_msginfo();
    msginfo_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string username = 2;
inline bool UserLogin_Ack::has_username() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void UserLogin_Ack::set_has_username() {
  _has_bits_[0] |= 0x00000002u;
}
inline void UserLogin_Ack::clear_has_username() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void UserLogin_Ack::clear_username() {
  if (username_ != &::google::protobuf::internal::kEmptyString) {
    username_->clear();
  }
  clear_has_username();
}
inline const ::std::string& UserLogin_Ack::username() const {
  return *username_;
}
inline void UserLogin_Ack::set_username(const ::std::string& value) {
  set_has_username();
  if (username_ == &::google::protobuf::internal::kEmptyString) {
    username_ = new ::std::string;
  }
  username_->assign(value);
}
inline void UserLogin_Ack::set_username(const char* value) {
  set_has_username();
  if (username_ == &::google::protobuf::internal::kEmptyString) {
    username_ = new ::std::string;
  }
  username_->assign(value);
}
inline void UserLogin_Ack::set_username(const char* value, size_t size) {
  set_has_username();
  if (username_ == &::google::protobuf::internal::kEmptyString) {
    username_ = new ::std::string;
  }
  username_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* UserLogin_Ack::mutable_username() {
  set_has_username();
  if (username_ == &::google::protobuf::internal::kEmptyString) {
    username_ = new ::std::string;
  }
  return username_;
}
inline ::std::string* UserLogin_Ack::release_username() {
  clear_has_username();
  if (username_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = username_;
    username_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void UserLogin_Ack::set_allocated_username(::std::string* username) {
  if (username_ != &::google::protobuf::internal::kEmptyString) {
    delete username_;
  }
  if (username) {
    set_has_username();
    username_ = username;
  } else {
    clear_has_username();
    username_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string nickname = 3;
inline bool UserLogin_Ack::has_nickname() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void UserLogin_Ack::set_has_nickname() {
  _has_bits_[0] |= 0x00000004u;
}
inline void UserLogin_Ack::clear_has_nickname() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void UserLogin_Ack::clear_nickname() {
  if (nickname_ != &::google::protobuf::internal::kEmptyString) {
    nickname_->clear();
  }
  clear_has_nickname();
}
inline const ::std::string& UserLogin_Ack::nickname() const {
  return *nickname_;
}
inline void UserLogin_Ack::set_nickname(const ::std::string& value) {
  set_has_nickname();
  if (nickname_ == &::google::protobuf::internal::kEmptyString) {
    nickname_ = new ::std::string;
  }
  nickname_->assign(value);
}
inline void UserLogin_Ack::set_nickname(const char* value) {
  set_has_nickname();
  if (nickname_ == &::google::protobuf::internal::kEmptyString) {
    nickname_ = new ::std::string;
  }
  nickname_->assign(value);
}
inline void UserLogin_Ack::set_nickname(const char* value, size_t size) {
  set_has_nickname();
  if (nickname_ == &::google::protobuf::internal::kEmptyString) {
    nickname_ = new ::std::string;
  }
  nickname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* UserLogin_Ack::mutable_nickname() {
  set_has_nickname();
  if (nickname_ == &::google::protobuf::internal::kEmptyString) {
    nickname_ = new ::std::string;
  }
  return nickname_;
}
inline ::std::string* UserLogin_Ack::release_nickname() {
  clear_has_nickname();
  if (nickname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = nickname_;
    nickname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void UserLogin_Ack::set_allocated_nickname(::std::string* nickname) {
  if (nickname_ != &::google::protobuf::internal::kEmptyString) {
    delete nickname_;
  }
  if (nickname) {
    set_has_nickname();
    nickname_ = nickname;
  } else {
    clear_has_nickname();
    nickname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 level = 4;
inline bool UserLogin_Ack::has_level() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void UserLogin_Ack::set_has_level() {
  _has_bits_[0] |= 0x00000008u;
}
inline void UserLogin_Ack::clear_has_level() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void UserLogin_Ack::clear_level() {
  level_ = 0;
  clear_has_level();
}
inline ::google::protobuf::int32 UserLogin_Ack::level() const {
  return level_;
}
inline void UserLogin_Ack::set_level(::google::protobuf::int32 value) {
  set_has_level();
  level_ = value;
}

// optional int32 star = 5;
inline bool UserLogin_Ack::has_star() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void UserLogin_Ack::set_has_star() {
  _has_bits_[0] |= 0x00000010u;
}
inline void UserLogin_Ack::clear_has_star() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void UserLogin_Ack::clear_star() {
  star_ = 0;
  clear_has_star();
}
inline ::google::protobuf::int32 UserLogin_Ack::star() const {
  return star_;
}
inline void UserLogin_Ack::set_star(::google::protobuf::int32 value) {
  set_has_star();
  star_ = value;
}

// optional int32 coin = 6;
inline bool UserLogin_Ack::has_coin() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void UserLogin_Ack::set_has_coin() {
  _has_bits_[0] |= 0x00000020u;
}
inline void UserLogin_Ack::clear_has_coin() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void UserLogin_Ack::clear_coin() {
  coin_ = 0;
  clear_has_coin();
}
inline ::google::protobuf::int32 UserLogin_Ack::coin() const {
  return coin_;
}
inline void UserLogin_Ack::set_coin(::google::protobuf::int32 value) {
  set_has_coin();
  coin_ = value;
}

// optional int32 diamond = 7;
inline bool UserLogin_Ack::has_diamond() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void UserLogin_Ack::set_has_diamond() {
  _has_bits_[0] |= 0x00000040u;
}
inline void UserLogin_Ack::clear_has_diamond() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void UserLogin_Ack::clear_diamond() {
  diamond_ = 0;
  clear_has_diamond();
}
inline ::google::protobuf::int32 UserLogin_Ack::diamond() const {
  return diamond_;
}
inline void UserLogin_Ack::set_diamond(::google::protobuf::int32 value) {
  set_has_diamond();
  diamond_ = value;
}

// optional int32 helpCount = 8;
inline bool UserLogin_Ack::has_helpcount() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void UserLogin_Ack::set_has_helpcount() {
  _has_bits_[0] |= 0x00000080u;
}
inline void UserLogin_Ack::clear_has_helpcount() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void UserLogin_Ack::clear_helpcount() {
  helpcount_ = 0;
  clear_has_helpcount();
}
inline ::google::protobuf::int32 UserLogin_Ack::helpcount() const {
  return helpcount_;
}
inline void UserLogin_Ack::set_helpcount(::google::protobuf::int32 value) {
  set_has_helpcount();
  helpcount_ = value;
}

// optional int32 roleType = 9;
inline bool UserLogin_Ack::has_roletype() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void UserLogin_Ack::set_has_roletype() {
  _has_bits_[0] |= 0x00000100u;
}
inline void UserLogin_Ack::clear_has_roletype() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void UserLogin_Ack::clear_roletype() {
  roletype_ = 0;
  clear_has_roletype();
}
inline ::google::protobuf::int32 UserLogin_Ack::roletype() const {
  return roletype_;
}
inline void UserLogin_Ack::set_roletype(::google::protobuf::int32 value) {
  set_has_roletype();
  roletype_ = value;
}

// optional int32 mailCount = 10;
inline bool UserLogin_Ack::has_mailcount() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void UserLogin_Ack::set_has_mailcount() {
  _has_bits_[0] |= 0x00000200u;
}
inline void UserLogin_Ack::clear_has_mailcount() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void UserLogin_Ack::clear_mailcount() {
  mailcount_ = 0;
  clear_has_mailcount();
}
inline ::google::protobuf::int32 UserLogin_Ack::mailcount() const {
  return mailcount_;
}
inline void UserLogin_Ack::set_mailcount(::google::protobuf::int32 value) {
  set_has_mailcount();
  mailcount_ = value;
}

// optional int32 weekScore = 11;
inline bool UserLogin_Ack::has_weekscore() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void UserLogin_Ack::set_has_weekscore() {
  _has_bits_[0] |= 0x00000400u;
}
inline void UserLogin_Ack::clear_has_weekscore() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void UserLogin_Ack::clear_weekscore() {
  weekscore_ = 0;
  clear_has_weekscore();
}
inline ::google::protobuf::int32 UserLogin_Ack::weekscore() const {
  return weekscore_;
}
inline void UserLogin_Ack::set_weekscore(::google::protobuf::int32 value) {
  set_has_weekscore();
  weekscore_ = value;
}

// optional int32 score = 12;
inline bool UserLogin_Ack::has_score() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void UserLogin_Ack::set_has_score() {
  _has_bits_[0] |= 0x00000800u;
}
inline void UserLogin_Ack::clear_has_score() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void UserLogin_Ack::clear_score() {
  score_ = 0;
  clear_has_score();
}
inline ::google::protobuf::int32 UserLogin_Ack::score() const {
  return score_;
}
inline void UserLogin_Ack::set_score(::google::protobuf::int32 value) {
  set_has_score();
  score_ = value;
}

// optional int32 time = 13;
inline bool UserLogin_Ack::has_time() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void UserLogin_Ack::set_has_time() {
  _has_bits_[0] |= 0x00001000u;
}
inline void UserLogin_Ack::clear_has_time() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void UserLogin_Ack::clear_time() {
  time_ = 0;
  clear_has_time();
}
inline ::google::protobuf::int32 UserLogin_Ack::time() const {
  return time_;
}
inline void UserLogin_Ack::set_time(::google::protobuf::int32 value) {
  set_has_time();
  time_ = value;
}

// optional string content = 14;
inline bool UserLogin_Ack::has_content() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void UserLogin_Ack::set_has_content() {
  _has_bits_[0] |= 0x00002000u;
}
inline void UserLogin_Ack::clear_has_content() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void UserLogin_Ack::clear_content() {
  if (content_ != &::google::protobuf::internal::kEmptyString) {
    content_->clear();
  }
  clear_has_content();
}
inline const ::std::string& UserLogin_Ack::content() const {
  return *content_;
}
inline void UserLogin_Ack::set_content(const ::std::string& value) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    content_ = new ::std::string;
  }
  content_->assign(value);
}
inline void UserLogin_Ack::set_content(const char* value) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    content_ = new ::std::string;
  }
  content_->assign(value);
}
inline void UserLogin_Ack::set_content(const char* value, size_t size) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    content_ = new ::std::string;
  }
  content_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* UserLogin_Ack::mutable_content() {
  set_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    content_ = new ::std::string;
  }
  return content_;
}
inline ::std::string* UserLogin_Ack::release_content() {
  clear_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = content_;
    content_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void UserLogin_Ack::set_allocated_content(::std::string* content) {
  if (content_ != &::google::protobuf::internal::kEmptyString) {
    delete content_;
  }
  if (content) {
    set_has_content();
    content_ = content;
  } else {
    clear_has_content();
    content_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string imgPath = 15;
inline bool UserLogin_Ack::has_imgpath() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void UserLogin_Ack::set_has_imgpath() {
  _has_bits_[0] |= 0x00004000u;
}
inline void UserLogin_Ack::clear_has_imgpath() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void UserLogin_Ack::clear_imgpath() {
  if (imgpath_ != &::google::protobuf::internal::kEmptyString) {
    imgpath_->clear();
  }
  clear_has_imgpath();
}
inline const ::std::string& UserLogin_Ack::imgpath() const {
  return *imgpath_;
}
inline void UserLogin_Ack::set_imgpath(const ::std::string& value) {
  set_has_imgpath();
  if (imgpath_ == &::google::protobuf::internal::kEmptyString) {
    imgpath_ = new ::std::string;
  }
  imgpath_->assign(value);
}
inline void UserLogin_Ack::set_imgpath(const char* value) {
  set_has_imgpath();
  if (imgpath_ == &::google::protobuf::internal::kEmptyString) {
    imgpath_ = new ::std::string;
  }
  imgpath_->assign(value);
}
inline void UserLogin_Ack::set_imgpath(const char* value, size_t size) {
  set_has_imgpath();
  if (imgpath_ == &::google::protobuf::internal::kEmptyString) {
    imgpath_ = new ::std::string;
  }
  imgpath_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* UserLogin_Ack::mutable_imgpath() {
  set_has_imgpath();
  if (imgpath_ == &::google::protobuf::internal::kEmptyString) {
    imgpath_ = new ::std::string;
  }
  return imgpath_;
}
inline ::std::string* UserLogin_Ack::release_imgpath() {
  clear_has_imgpath();
  if (imgpath_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = imgpath_;
    imgpath_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void UserLogin_Ack::set_allocated_imgpath(::std::string* imgpath) {
  if (imgpath_ != &::google::protobuf::internal::kEmptyString) {
    delete imgpath_;
  }
  if (imgpath) {
    set_has_imgpath();
    imgpath_ = imgpath;
  } else {
    clear_has_imgpath();
    imgpath_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 avtiveCount = 16;
inline bool UserLogin_Ack::has_avtivecount() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void UserLogin_Ack::set_has_avtivecount() {
  _has_bits_[0] |= 0x00008000u;
}
inline void UserLogin_Ack::clear_has_avtivecount() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void UserLogin_Ack::clear_avtivecount() {
  avtivecount_ = 0;
  clear_has_avtivecount();
}
inline ::google::protobuf::int32 UserLogin_Ack::avtivecount() const {
  return avtivecount_;
}
inline void UserLogin_Ack::set_avtivecount(::google::protobuf::int32 value) {
  set_has_avtivecount();
  avtivecount_ = value;
}

// optional bool helpInc = 17;
inline bool UserLogin_Ack::has_helpinc() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void UserLogin_Ack::set_has_helpinc() {
  _has_bits_[0] |= 0x00010000u;
}
inline void UserLogin_Ack::clear_has_helpinc() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void UserLogin_Ack::clear_helpinc() {
  helpinc_ = false;
  clear_has_helpinc();
}
inline bool UserLogin_Ack::helpinc() const {
  return helpinc_;
}
inline void UserLogin_Ack::set_helpinc(bool value) {
  set_has_helpinc();
  helpinc_ = value;
}

// optional int32 bgmInc = 18;
inline bool UserLogin_Ack::has_bgminc() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void UserLogin_Ack::set_has_bgminc() {
  _has_bits_[0] |= 0x00020000u;
}
inline void UserLogin_Ack::clear_has_bgminc() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void UserLogin_Ack::clear_bgminc() {
  bgminc_ = 0;
  clear_has_bgminc();
}
inline ::google::protobuf::int32 UserLogin_Ack::bgminc() const {
  return bgminc_;
}
inline void UserLogin_Ack::set_bgminc(::google::protobuf::int32 value) {
  set_has_bgminc();
  bgminc_ = value;
}

// optional int32 soundInc = 19;
inline bool UserLogin_Ack::has_soundinc() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void UserLogin_Ack::set_has_soundinc() {
  _has_bits_[0] |= 0x00040000u;
}
inline void UserLogin_Ack::clear_has_soundinc() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void UserLogin_Ack::clear_soundinc() {
  soundinc_ = 0;
  clear_has_soundinc();
}
inline ::google::protobuf::int32 UserLogin_Ack::soundinc() const {
  return soundinc_;
}
inline void UserLogin_Ack::set_soundinc(::google::protobuf::int32 value) {
  set_has_soundinc();
  soundinc_ = value;
}

// optional int32 sensitivityInc = 20;
inline bool UserLogin_Ack::has_sensitivityinc() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void UserLogin_Ack::set_has_sensitivityinc() {
  _has_bits_[0] |= 0x00080000u;
}
inline void UserLogin_Ack::clear_has_sensitivityinc() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void UserLogin_Ack::clear_sensitivityinc() {
  sensitivityinc_ = 0;
  clear_has_sensitivityinc();
}
inline ::google::protobuf::int32 UserLogin_Ack::sensitivityinc() const {
  return sensitivityinc_;
}
inline void UserLogin_Ack::set_sensitivityinc(::google::protobuf::int32 value) {
  set_has_sensitivityinc();
  sensitivityinc_ = value;
}

// optional int32 loginCount = 21;
inline bool UserLogin_Ack::has_logincount() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void UserLogin_Ack::set_has_logincount() {
  _has_bits_[0] |= 0x00100000u;
}
inline void UserLogin_Ack::clear_has_logincount() {
  _has_bits_[0] &= ~0x00100000u;
}
inline void UserLogin_Ack::clear_logincount() {
  logincount_ = 0;
  clear_has_logincount();
}
inline ::google::protobuf::int32 UserLogin_Ack::logincount() const {
  return logincount_;
}
inline void UserLogin_Ack::set_logincount(::google::protobuf::int32 value) {
  set_has_logincount();
  logincount_ = value;
}

// optional int32 loginCountTotal = 22;
inline bool UserLogin_Ack::has_logincounttotal() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
inline void UserLogin_Ack::set_has_logincounttotal() {
  _has_bits_[0] |= 0x00200000u;
}
inline void UserLogin_Ack::clear_has_logincounttotal() {
  _has_bits_[0] &= ~0x00200000u;
}
inline void UserLogin_Ack::clear_logincounttotal() {
  logincounttotal_ = 0;
  clear_has_logincounttotal();
}
inline ::google::protobuf::int32 UserLogin_Ack::logincounttotal() const {
  return logincounttotal_;
}
inline void UserLogin_Ack::set_logincounttotal(::google::protobuf::int32 value) {
  set_has_logincounttotal();
  logincounttotal_ = value;
}

// optional string token = 23;
inline bool UserLogin_Ack::has_token() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
inline void UserLogin_Ack::set_has_token() {
  _has_bits_[0] |= 0x00400000u;
}
inline void UserLogin_Ack::clear_has_token() {
  _has_bits_[0] &= ~0x00400000u;
}
inline void UserLogin_Ack::clear_token() {
  if (token_ != &::google::protobuf::internal::kEmptyString) {
    token_->clear();
  }
  clear_has_token();
}
inline const ::std::string& UserLogin_Ack::token() const {
  return *token_;
}
inline void UserLogin_Ack::set_token(const ::std::string& value) {
  set_has_token();
  if (token_ == &::google::protobuf::internal::kEmptyString) {
    token_ = new ::std::string;
  }
  token_->assign(value);
}
inline void UserLogin_Ack::set_token(const char* value) {
  set_has_token();
  if (token_ == &::google::protobuf::internal::kEmptyString) {
    token_ = new ::std::string;
  }
  token_->assign(value);
}
inline void UserLogin_Ack::set_token(const char* value, size_t size) {
  set_has_token();
  if (token_ == &::google::protobuf::internal::kEmptyString) {
    token_ = new ::std::string;
  }
  token_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* UserLogin_Ack::mutable_token() {
  set_has_token();
  if (token_ == &::google::protobuf::internal::kEmptyString) {
    token_ = new ::std::string;
  }
  return token_;
}
inline ::std::string* UserLogin_Ack::release_token() {
  clear_has_token();
  if (token_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = token_;
    token_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void UserLogin_Ack::set_allocated_token(::std::string* token) {
  if (token_ != &::google::protobuf::internal::kEmptyString) {
    delete token_;
  }
  if (token) {
    set_has_token();
    token_ = token;
  } else {
    clear_has_token();
    token_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 playerId = 24;
inline bool UserLogin_Ack::has_playerid() const {
  return (_has_bits_[0] & 0x00800000u) != 0;
}
inline void UserLogin_Ack::set_has_playerid() {
  _has_bits_[0] |= 0x00800000u;
}
inline void UserLogin_Ack::clear_has_playerid() {
  _has_bits_[0] &= ~0x00800000u;
}
inline void UserLogin_Ack::clear_playerid() {
  playerid_ = 0;
  clear_has_playerid();
}
inline ::google::protobuf::int32 UserLogin_Ack::playerid() const {
  return playerid_;
}
inline void UserLogin_Ack::set_playerid(::google::protobuf::int32 value) {
  set_has_playerid();
  playerid_ = value;
}

// optional int32 stageId = 25;
inline bool UserLogin_Ack::has_stageid() const {
  return (_has_bits_[0] & 0x01000000u) != 0;
}
inline void UserLogin_Ack::set_has_stageid() {
  _has_bits_[0] |= 0x01000000u;
}
inline void UserLogin_Ack::clear_has_stageid() {
  _has_bits_[0] &= ~0x01000000u;
}
inline void UserLogin_Ack::clear_stageid() {
  stageid_ = 0;
  clear_has_stageid();
}
inline ::google::protobuf::int32 UserLogin_Ack::stageid() const {
  return stageid_;
}
inline void UserLogin_Ack::set_stageid(::google::protobuf::int32 value) {
  set_has_stageid();
  stageid_ = value;
}

// optional int32 count = 26;
inline bool UserLogin_Ack::has_count() const {
  return (_has_bits_[0] & 0x02000000u) != 0;
}
inline void UserLogin_Ack::set_has_count() {
  _has_bits_[0] |= 0x02000000u;
}
inline void UserLogin_Ack::clear_has_count() {
  _has_bits_[0] &= ~0x02000000u;
}
inline void UserLogin_Ack::clear_count() {
  count_ = 0;
  clear_has_count();
}
inline ::google::protobuf::int32 UserLogin_Ack::count() const {
  return count_;
}
inline void UserLogin_Ack::set_count(::google::protobuf::int32 value) {
  set_has_count();
  count_ = value;
}

// required int32 acktime = 27;
inline bool UserLogin_Ack::has_acktime() const {
  return (_has_bits_[0] & 0x04000000u) != 0;
}
inline void UserLogin_Ack::set_has_acktime() {
  _has_bits_[0] |= 0x04000000u;
}
inline void UserLogin_Ack::clear_has_acktime() {
  _has_bits_[0] &= ~0x04000000u;
}
inline void UserLogin_Ack::clear_acktime() {
  acktime_ = 0;
  clear_has_acktime();
}
inline ::google::protobuf::int32 UserLogin_Ack::acktime() const {
  return acktime_;
}
inline void UserLogin_Ack::set_acktime(::google::protobuf::int32 value) {
  set_has_acktime();
  acktime_ = value;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace protobuf

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_UserLogin_5fAck_2eproto__INCLUDED
