// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: UserLogin_Ack.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "UserLogin_Ack.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace protobuf {

namespace {

const ::google::protobuf::Descriptor* UserLogin_Ack_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UserLogin_Ack_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_UserLogin_5fAck_2eproto() {
  protobuf_AddDesc_UserLogin_5fAck_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "UserLogin_Ack.proto");
  GOOGLE_CHECK(file != NULL);
  UserLogin_Ack_descriptor_ = file->message_type(0);
  static const int UserLogin_Ack_offsets_[27] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserLogin_Ack, msginfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserLogin_Ack, username_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserLogin_Ack, nickname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserLogin_Ack, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserLogin_Ack, star_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserLogin_Ack, coin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserLogin_Ack, diamond_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserLogin_Ack, helpcount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserLogin_Ack, roletype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserLogin_Ack, mailcount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserLogin_Ack, weekscore_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserLogin_Ack, score_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserLogin_Ack, time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserLogin_Ack, content_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserLogin_Ack, imgpath_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserLogin_Ack, avtivecount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserLogin_Ack, helpinc_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserLogin_Ack, bgminc_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserLogin_Ack, soundinc_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserLogin_Ack, sensitivityinc_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserLogin_Ack, logincount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserLogin_Ack, logincounttotal_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserLogin_Ack, token_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserLogin_Ack, playerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserLogin_Ack, stageid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserLogin_Ack, count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserLogin_Ack, acktime_),
  };
  UserLogin_Ack_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UserLogin_Ack_descriptor_,
      UserLogin_Ack::default_instance_,
      UserLogin_Ack_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserLogin_Ack, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserLogin_Ack, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UserLogin_Ack));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_UserLogin_5fAck_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UserLogin_Ack_descriptor_, &UserLogin_Ack::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_UserLogin_5fAck_2eproto() {
  delete UserLogin_Ack::default_instance_;
  delete UserLogin_Ack_reflection_;
}

void protobuf_AddDesc_UserLogin_5fAck_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\023UserLogin_Ack.proto\022\010protobuf\"\351\003\n\rUser"
    "Login_Ack\022\017\n\007msgInfo\030\001 \001(\t\022\020\n\010username\030\002"
    " \001(\t\022\020\n\010nickname\030\003 \001(\t\022\r\n\005level\030\004 \001(\005\022\014\n"
    "\004star\030\005 \001(\005\022\014\n\004coin\030\006 \001(\005\022\017\n\007diamond\030\007 \001"
    "(\005\022\021\n\thelpCount\030\010 \001(\005\022\020\n\010roleType\030\t \001(\005\022"
    "\021\n\tmailCount\030\n \001(\005\022\021\n\tweekScore\030\013 \001(\005\022\r\n"
    "\005score\030\014 \001(\005\022\014\n\004time\030\r \001(\005\022\017\n\007content\030\016 "
    "\001(\t\022\017\n\007imgPath\030\017 \001(\t\022\023\n\013avtiveCount\030\020 \001("
    "\005\022\017\n\007helpInc\030\021 \001(\010\022\016\n\006bgmInc\030\022 \001(\005\022\020\n\010so"
    "undInc\030\023 \001(\005\022\026\n\016sensitivityInc\030\024 \001(\005\022\022\n\n"
    "loginCount\030\025 \001(\005\022\027\n\017loginCountTotal\030\026 \001("
    "\005\022\r\n\005token\030\027 \001(\t\022\020\n\010playerId\030\030 \001(\005\022\017\n\007st"
    "ageId\030\031 \001(\005\022\r\n\005count\030\032 \001(\005\022\017\n\007acktime\030\033 "
    "\002(\005", 523);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "UserLogin_Ack.proto", &protobuf_RegisterTypes);
  UserLogin_Ack::default_instance_ = new UserLogin_Ack();
  UserLogin_Ack::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_UserLogin_5fAck_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_UserLogin_5fAck_2eproto {
  StaticDescriptorInitializer_UserLogin_5fAck_2eproto() {
    protobuf_AddDesc_UserLogin_5fAck_2eproto();
  }
} static_descriptor_initializer_UserLogin_5fAck_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int UserLogin_Ack::kMsgInfoFieldNumber;
const int UserLogin_Ack::kUsernameFieldNumber;
const int UserLogin_Ack::kNicknameFieldNumber;
const int UserLogin_Ack::kLevelFieldNumber;
const int UserLogin_Ack::kStarFieldNumber;
const int UserLogin_Ack::kCoinFieldNumber;
const int UserLogin_Ack::kDiamondFieldNumber;
const int UserLogin_Ack::kHelpCountFieldNumber;
const int UserLogin_Ack::kRoleTypeFieldNumber;
const int UserLogin_Ack::kMailCountFieldNumber;
const int UserLogin_Ack::kWeekScoreFieldNumber;
const int UserLogin_Ack::kScoreFieldNumber;
const int UserLogin_Ack::kTimeFieldNumber;
const int UserLogin_Ack::kContentFieldNumber;
const int UserLogin_Ack::kImgPathFieldNumber;
const int UserLogin_Ack::kAvtiveCountFieldNumber;
const int UserLogin_Ack::kHelpIncFieldNumber;
const int UserLogin_Ack::kBgmIncFieldNumber;
const int UserLogin_Ack::kSoundIncFieldNumber;
const int UserLogin_Ack::kSensitivityIncFieldNumber;
const int UserLogin_Ack::kLoginCountFieldNumber;
const int UserLogin_Ack::kLoginCountTotalFieldNumber;
const int UserLogin_Ack::kTokenFieldNumber;
const int UserLogin_Ack::kPlayerIdFieldNumber;
const int UserLogin_Ack::kStageIdFieldNumber;
const int UserLogin_Ack::kCountFieldNumber;
const int UserLogin_Ack::kAcktimeFieldNumber;
#endif  // !_MSC_VER

UserLogin_Ack::UserLogin_Ack()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void UserLogin_Ack::InitAsDefaultInstance() {
}

UserLogin_Ack::UserLogin_Ack(const UserLogin_Ack& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void UserLogin_Ack::SharedCtor() {
  _cached_size_ = 0;
  msginfo_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  username_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  nickname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  level_ = 0;
  star_ = 0;
  coin_ = 0;
  diamond_ = 0;
  helpcount_ = 0;
  roletype_ = 0;
  mailcount_ = 0;
  weekscore_ = 0;
  score_ = 0;
  time_ = 0;
  content_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  imgpath_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  avtivecount_ = 0;
  helpinc_ = false;
  bgminc_ = 0;
  soundinc_ = 0;
  sensitivityinc_ = 0;
  logincount_ = 0;
  logincounttotal_ = 0;
  token_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  playerid_ = 0;
  stageid_ = 0;
  count_ = 0;
  acktime_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UserLogin_Ack::~UserLogin_Ack() {
  SharedDtor();
}

void UserLogin_Ack::SharedDtor() {
  if (msginfo_ != &::google::protobuf::internal::kEmptyString) {
    delete msginfo_;
  }
  if (username_ != &::google::protobuf::internal::kEmptyString) {
    delete username_;
  }
  if (nickname_ != &::google::protobuf::internal::kEmptyString) {
    delete nickname_;
  }
  if (content_ != &::google::protobuf::internal::kEmptyString) {
    delete content_;
  }
  if (imgpath_ != &::google::protobuf::internal::kEmptyString) {
    delete imgpath_;
  }
  if (token_ != &::google::protobuf::internal::kEmptyString) {
    delete token_;
  }
  if (this != default_instance_) {
  }
}

void UserLogin_Ack::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UserLogin_Ack::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UserLogin_Ack_descriptor_;
}

const UserLogin_Ack& UserLogin_Ack::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_UserLogin_5fAck_2eproto();
  return *default_instance_;
}

UserLogin_Ack* UserLogin_Ack::default_instance_ = NULL;

UserLogin_Ack* UserLogin_Ack::New() const {
  return new UserLogin_Ack;
}

void UserLogin_Ack::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_msginfo()) {
      if (msginfo_ != &::google::protobuf::internal::kEmptyString) {
        msginfo_->clear();
      }
    }
    if (has_username()) {
      if (username_ != &::google::protobuf::internal::kEmptyString) {
        username_->clear();
      }
    }
    if (has_nickname()) {
      if (nickname_ != &::google::protobuf::internal::kEmptyString) {
        nickname_->clear();
      }
    }
    level_ = 0;
    star_ = 0;
    coin_ = 0;
    diamond_ = 0;
    helpcount_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    roletype_ = 0;
    mailcount_ = 0;
    weekscore_ = 0;
    score_ = 0;
    time_ = 0;
    if (has_content()) {
      if (content_ != &::google::protobuf::internal::kEmptyString) {
        content_->clear();
      }
    }
    if (has_imgpath()) {
      if (imgpath_ != &::google::protobuf::internal::kEmptyString) {
        imgpath_->clear();
      }
    }
    avtivecount_ = 0;
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    helpinc_ = false;
    bgminc_ = 0;
    soundinc_ = 0;
    sensitivityinc_ = 0;
    logincount_ = 0;
    logincounttotal_ = 0;
    if (has_token()) {
      if (token_ != &::google::protobuf::internal::kEmptyString) {
        token_->clear();
      }
    }
    playerid_ = 0;
  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    stageid_ = 0;
    count_ = 0;
    acktime_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UserLogin_Ack::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string msgInfo = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msginfo()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->msginfo().data(), this->msginfo().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_username;
        break;
      }

      // optional string username = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_username:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_username()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->username().data(), this->username().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_nickname;
        break;
      }

      // optional string nickname = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_nickname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_nickname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->nickname().data(), this->nickname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_level;
        break;
      }

      // optional int32 level = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_star;
        break;
      }

      // optional int32 star = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_star:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &star_)));
          set_has_star();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_coin;
        break;
      }

      // optional int32 coin = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_coin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &coin_)));
          set_has_coin();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_diamond;
        break;
      }

      // optional int32 diamond = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_diamond:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &diamond_)));
          set_has_diamond();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_helpCount;
        break;
      }

      // optional int32 helpCount = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_helpCount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &helpcount_)));
          set_has_helpcount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_roleType;
        break;
      }

      // optional int32 roleType = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_roleType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &roletype_)));
          set_has_roletype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_mailCount;
        break;
      }

      // optional int32 mailCount = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_mailCount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mailcount_)));
          set_has_mailcount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_weekScore;
        break;
      }

      // optional int32 weekScore = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_weekScore:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &weekscore_)));
          set_has_weekscore();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_score;
        break;
      }

      // optional int32 score = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_score:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &score_)));
          set_has_score();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_time;
        break;
      }

      // optional int32 time = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(114)) goto parse_content;
        break;
      }

      // optional string content = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_content:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_content()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->content().data(), this->content().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(122)) goto parse_imgPath;
        break;
      }

      // optional string imgPath = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_imgPath:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_imgpath()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->imgpath().data(), this->imgpath().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(128)) goto parse_avtiveCount;
        break;
      }

      // optional int32 avtiveCount = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_avtiveCount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &avtivecount_)));
          set_has_avtivecount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(136)) goto parse_helpInc;
        break;
      }

      // optional bool helpInc = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_helpInc:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &helpinc_)));
          set_has_helpinc();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(144)) goto parse_bgmInc;
        break;
      }

      // optional int32 bgmInc = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bgmInc:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bgminc_)));
          set_has_bgminc();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(152)) goto parse_soundInc;
        break;
      }

      // optional int32 soundInc = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_soundInc:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &soundinc_)));
          set_has_soundinc();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(160)) goto parse_sensitivityInc;
        break;
      }

      // optional int32 sensitivityInc = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sensitivityInc:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sensitivityinc_)));
          set_has_sensitivityinc();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(168)) goto parse_loginCount;
        break;
      }

      // optional int32 loginCount = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_loginCount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &logincount_)));
          set_has_logincount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(176)) goto parse_loginCountTotal;
        break;
      }

      // optional int32 loginCountTotal = 22;
      case 22: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_loginCountTotal:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &logincounttotal_)));
          set_has_logincounttotal();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(186)) goto parse_token;
        break;
      }

      // optional string token = 23;
      case 23: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_token:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_token()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->token().data(), this->token().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(192)) goto parse_playerId;
        break;
      }

      // optional int32 playerId = 24;
      case 24: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_playerId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &playerid_)));
          set_has_playerid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(200)) goto parse_stageId;
        break;
      }

      // optional int32 stageId = 25;
      case 25: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_stageId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &stageid_)));
          set_has_stageid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(208)) goto parse_count;
        break;
      }

      // optional int32 count = 26;
      case 26: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &count_)));
          set_has_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(216)) goto parse_acktime;
        break;
      }

      // required int32 acktime = 27;
      case 27: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_acktime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &acktime_)));
          set_has_acktime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void UserLogin_Ack::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string msgInfo = 1;
  if (has_msginfo()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msginfo().data(), this->msginfo().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->msginfo(), output);
  }

  // optional string username = 2;
  if (has_username()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->username().data(), this->username().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->username(), output);
  }

  // optional string nickname = 3;
  if (has_nickname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->nickname().data(), this->nickname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->nickname(), output);
  }

  // optional int32 level = 4;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->level(), output);
  }

  // optional int32 star = 5;
  if (has_star()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->star(), output);
  }

  // optional int32 coin = 6;
  if (has_coin()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->coin(), output);
  }

  // optional int32 diamond = 7;
  if (has_diamond()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->diamond(), output);
  }

  // optional int32 helpCount = 8;
  if (has_helpcount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->helpcount(), output);
  }

  // optional int32 roleType = 9;
  if (has_roletype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->roletype(), output);
  }

  // optional int32 mailCount = 10;
  if (has_mailcount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->mailcount(), output);
  }

  // optional int32 weekScore = 11;
  if (has_weekscore()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->weekscore(), output);
  }

  // optional int32 score = 12;
  if (has_score()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->score(), output);
  }

  // optional int32 time = 13;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->time(), output);
  }

  // optional string content = 14;
  if (has_content()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->content().data(), this->content().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      14, this->content(), output);
  }

  // optional string imgPath = 15;
  if (has_imgpath()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->imgpath().data(), this->imgpath().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      15, this->imgpath(), output);
  }

  // optional int32 avtiveCount = 16;
  if (has_avtivecount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(16, this->avtivecount(), output);
  }

  // optional bool helpInc = 17;
  if (has_helpinc()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(17, this->helpinc(), output);
  }

  // optional int32 bgmInc = 18;
  if (has_bgminc()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(18, this->bgminc(), output);
  }

  // optional int32 soundInc = 19;
  if (has_soundinc()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(19, this->soundinc(), output);
  }

  // optional int32 sensitivityInc = 20;
  if (has_sensitivityinc()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(20, this->sensitivityinc(), output);
  }

  // optional int32 loginCount = 21;
  if (has_logincount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(21, this->logincount(), output);
  }

  // optional int32 loginCountTotal = 22;
  if (has_logincounttotal()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(22, this->logincounttotal(), output);
  }

  // optional string token = 23;
  if (has_token()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->token().data(), this->token().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      23, this->token(), output);
  }

  // optional int32 playerId = 24;
  if (has_playerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(24, this->playerid(), output);
  }

  // optional int32 stageId = 25;
  if (has_stageid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(25, this->stageid(), output);
  }

  // optional int32 count = 26;
  if (has_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(26, this->count(), output);
  }

  // required int32 acktime = 27;
  if (has_acktime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(27, this->acktime(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* UserLogin_Ack::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string msgInfo = 1;
  if (has_msginfo()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msginfo().data(), this->msginfo().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->msginfo(), target);
  }

  // optional string username = 2;
  if (has_username()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->username().data(), this->username().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->username(), target);
  }

  // optional string nickname = 3;
  if (has_nickname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->nickname().data(), this->nickname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->nickname(), target);
  }

  // optional int32 level = 4;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->level(), target);
  }

  // optional int32 star = 5;
  if (has_star()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->star(), target);
  }

  // optional int32 coin = 6;
  if (has_coin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->coin(), target);
  }

  // optional int32 diamond = 7;
  if (has_diamond()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->diamond(), target);
  }

  // optional int32 helpCount = 8;
  if (has_helpcount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->helpcount(), target);
  }

  // optional int32 roleType = 9;
  if (has_roletype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->roletype(), target);
  }

  // optional int32 mailCount = 10;
  if (has_mailcount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->mailcount(), target);
  }

  // optional int32 weekScore = 11;
  if (has_weekscore()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->weekscore(), target);
  }

  // optional int32 score = 12;
  if (has_score()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->score(), target);
  }

  // optional int32 time = 13;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->time(), target);
  }

  // optional string content = 14;
  if (has_content()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->content().data(), this->content().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        14, this->content(), target);
  }

  // optional string imgPath = 15;
  if (has_imgpath()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->imgpath().data(), this->imgpath().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        15, this->imgpath(), target);
  }

  // optional int32 avtiveCount = 16;
  if (has_avtivecount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(16, this->avtivecount(), target);
  }

  // optional bool helpInc = 17;
  if (has_helpinc()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(17, this->helpinc(), target);
  }

  // optional int32 bgmInc = 18;
  if (has_bgminc()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(18, this->bgminc(), target);
  }

  // optional int32 soundInc = 19;
  if (has_soundinc()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(19, this->soundinc(), target);
  }

  // optional int32 sensitivityInc = 20;
  if (has_sensitivityinc()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(20, this->sensitivityinc(), target);
  }

  // optional int32 loginCount = 21;
  if (has_logincount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(21, this->logincount(), target);
  }

  // optional int32 loginCountTotal = 22;
  if (has_logincounttotal()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(22, this->logincounttotal(), target);
  }

  // optional string token = 23;
  if (has_token()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->token().data(), this->token().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        23, this->token(), target);
  }

  // optional int32 playerId = 24;
  if (has_playerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(24, this->playerid(), target);
  }

  // optional int32 stageId = 25;
  if (has_stageid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(25, this->stageid(), target);
  }

  // optional int32 count = 26;
  if (has_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(26, this->count(), target);
  }

  // required int32 acktime = 27;
  if (has_acktime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(27, this->acktime(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int UserLogin_Ack::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string msgInfo = 1;
    if (has_msginfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->msginfo());
    }

    // optional string username = 2;
    if (has_username()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->username());
    }

    // optional string nickname = 3;
    if (has_nickname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->nickname());
    }

    // optional int32 level = 4;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->level());
    }

    // optional int32 star = 5;
    if (has_star()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->star());
    }

    // optional int32 coin = 6;
    if (has_coin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->coin());
    }

    // optional int32 diamond = 7;
    if (has_diamond()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->diamond());
    }

    // optional int32 helpCount = 8;
    if (has_helpcount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->helpcount());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 roleType = 9;
    if (has_roletype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->roletype());
    }

    // optional int32 mailCount = 10;
    if (has_mailcount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->mailcount());
    }

    // optional int32 weekScore = 11;
    if (has_weekscore()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->weekscore());
    }

    // optional int32 score = 12;
    if (has_score()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->score());
    }

    // optional int32 time = 13;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->time());
    }

    // optional string content = 14;
    if (has_content()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->content());
    }

    // optional string imgPath = 15;
    if (has_imgpath()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->imgpath());
    }

    // optional int32 avtiveCount = 16;
    if (has_avtivecount()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->avtivecount());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional bool helpInc = 17;
    if (has_helpinc()) {
      total_size += 2 + 1;
    }

    // optional int32 bgmInc = 18;
    if (has_bgminc()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bgminc());
    }

    // optional int32 soundInc = 19;
    if (has_soundinc()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->soundinc());
    }

    // optional int32 sensitivityInc = 20;
    if (has_sensitivityinc()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sensitivityinc());
    }

    // optional int32 loginCount = 21;
    if (has_logincount()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->logincount());
    }

    // optional int32 loginCountTotal = 22;
    if (has_logincounttotal()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->logincounttotal());
    }

    // optional string token = 23;
    if (has_token()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->token());
    }

    // optional int32 playerId = 24;
    if (has_playerid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->playerid());
    }

  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    // optional int32 stageId = 25;
    if (has_stageid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->stageid());
    }

    // optional int32 count = 26;
    if (has_count()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->count());
    }

    // required int32 acktime = 27;
    if (has_acktime()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->acktime());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UserLogin_Ack::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UserLogin_Ack* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UserLogin_Ack*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UserLogin_Ack::MergeFrom(const UserLogin_Ack& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msginfo()) {
      set_msginfo(from.msginfo());
    }
    if (from.has_username()) {
      set_username(from.username());
    }
    if (from.has_nickname()) {
      set_nickname(from.nickname());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_star()) {
      set_star(from.star());
    }
    if (from.has_coin()) {
      set_coin(from.coin());
    }
    if (from.has_diamond()) {
      set_diamond(from.diamond());
    }
    if (from.has_helpcount()) {
      set_helpcount(from.helpcount());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_roletype()) {
      set_roletype(from.roletype());
    }
    if (from.has_mailcount()) {
      set_mailcount(from.mailcount());
    }
    if (from.has_weekscore()) {
      set_weekscore(from.weekscore());
    }
    if (from.has_score()) {
      set_score(from.score());
    }
    if (from.has_time()) {
      set_time(from.time());
    }
    if (from.has_content()) {
      set_content(from.content());
    }
    if (from.has_imgpath()) {
      set_imgpath(from.imgpath());
    }
    if (from.has_avtivecount()) {
      set_avtivecount(from.avtivecount());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_helpinc()) {
      set_helpinc(from.helpinc());
    }
    if (from.has_bgminc()) {
      set_bgminc(from.bgminc());
    }
    if (from.has_soundinc()) {
      set_soundinc(from.soundinc());
    }
    if (from.has_sensitivityinc()) {
      set_sensitivityinc(from.sensitivityinc());
    }
    if (from.has_logincount()) {
      set_logincount(from.logincount());
    }
    if (from.has_logincounttotal()) {
      set_logincounttotal(from.logincounttotal());
    }
    if (from.has_token()) {
      set_token(from.token());
    }
    if (from.has_playerid()) {
      set_playerid(from.playerid());
    }
  }
  if (from._has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (from.has_stageid()) {
      set_stageid(from.stageid());
    }
    if (from.has_count()) {
      set_count(from.count());
    }
    if (from.has_acktime()) {
      set_acktime(from.acktime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UserLogin_Ack::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserLogin_Ack::CopyFrom(const UserLogin_Ack& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserLogin_Ack::IsInitialized() const {
  if ((_has_bits_[0] & 0x04000000) != 0x04000000) return false;

  return true;
}

void UserLogin_Ack::Swap(UserLogin_Ack* other) {
  if (other != this) {
    std::swap(msginfo_, other->msginfo_);
    std::swap(username_, other->username_);
    std::swap(nickname_, other->nickname_);
    std::swap(level_, other->level_);
    std::swap(star_, other->star_);
    std::swap(coin_, other->coin_);
    std::swap(diamond_, other->diamond_);
    std::swap(helpcount_, other->helpcount_);
    std::swap(roletype_, other->roletype_);
    std::swap(mailcount_, other->mailcount_);
    std::swap(weekscore_, other->weekscore_);
    std::swap(score_, other->score_);
    std::swap(time_, other->time_);
    std::swap(content_, other->content_);
    std::swap(imgpath_, other->imgpath_);
    std::swap(avtivecount_, other->avtivecount_);
    std::swap(helpinc_, other->helpinc_);
    std::swap(bgminc_, other->bgminc_);
    std::swap(soundinc_, other->soundinc_);
    std::swap(sensitivityinc_, other->sensitivityinc_);
    std::swap(logincount_, other->logincount_);
    std::swap(logincounttotal_, other->logincounttotal_);
    std::swap(token_, other->token_);
    std::swap(playerid_, other->playerid_);
    std::swap(stageid_, other->stageid_);
    std::swap(count_, other->count_);
    std::swap(acktime_, other->acktime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UserLogin_Ack::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UserLogin_Ack_descriptor_;
  metadata.reflection = UserLogin_Ack_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace protobuf

// @@protoc_insertion_point(global_scope)
