// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: RoleList_Ack.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "RoleList_Ack.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace protobuf {

namespace {

const ::google::protobuf::Descriptor* RoleList_Ack_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RoleList_Ack_reflection_ = NULL;
const ::google::protobuf::Descriptor* RoleList_Ack_RoleList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RoleList_Ack_RoleList_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_RoleList_5fAck_2eproto() {
  protobuf_AddDesc_RoleList_5fAck_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "RoleList_Ack.proto");
  GOOGLE_CHECK(file != NULL);
  RoleList_Ack_descriptor_ = file->message_type(0);
  static const int RoleList_Ack_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleList_Ack, msginfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleList_Ack, rolelist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleList_Ack, acktime_),
  };
  RoleList_Ack_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RoleList_Ack_descriptor_,
      RoleList_Ack::default_instance_,
      RoleList_Ack_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleList_Ack, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleList_Ack, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RoleList_Ack));
  RoleList_Ack_RoleList_descriptor_ = RoleList_Ack_descriptor_->nested_type(0);
  static const int RoleList_Ack_RoleList_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleList_Ack_RoleList, roletype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleList_Ack_RoleList, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleList_Ack_RoleList, breaktype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleList_Ack_RoleList, ismax_),
  };
  RoleList_Ack_RoleList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RoleList_Ack_RoleList_descriptor_,
      RoleList_Ack_RoleList::default_instance_,
      RoleList_Ack_RoleList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleList_Ack_RoleList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleList_Ack_RoleList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RoleList_Ack_RoleList));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_RoleList_5fAck_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RoleList_Ack_descriptor_, &RoleList_Ack::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RoleList_Ack_RoleList_descriptor_, &RoleList_Ack_RoleList::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_RoleList_5fAck_2eproto() {
  delete RoleList_Ack::default_instance_;
  delete RoleList_Ack_reflection_;
  delete RoleList_Ack_RoleList::default_instance_;
  delete RoleList_Ack_RoleList_reflection_;
}

void protobuf_AddDesc_RoleList_5fAck_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\022RoleList_Ack.proto\022\010protobuf\"\262\001\n\014RoleL"
    "ist_Ack\022\017\n\007msgInfo\030\001 \001(\t\0221\n\010roleList\030\002 \003"
    "(\0132\037.protobuf.RoleList_Ack.RoleList\022\017\n\007a"
    "cktime\030\003 \002(\005\032M\n\010RoleList\022\020\n\010roleType\030\001 \001"
    "(\005\022\r\n\005level\030\002 \001(\005\022\021\n\tbreakType\030\003 \001(\010\022\r\n\005"
    "isMax\030\004 \001(\010", 211);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "RoleList_Ack.proto", &protobuf_RegisterTypes);
  RoleList_Ack::default_instance_ = new RoleList_Ack();
  RoleList_Ack_RoleList::default_instance_ = new RoleList_Ack_RoleList();
  RoleList_Ack::default_instance_->InitAsDefaultInstance();
  RoleList_Ack_RoleList::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_RoleList_5fAck_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_RoleList_5fAck_2eproto {
  StaticDescriptorInitializer_RoleList_5fAck_2eproto() {
    protobuf_AddDesc_RoleList_5fAck_2eproto();
  }
} static_descriptor_initializer_RoleList_5fAck_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int RoleList_Ack_RoleList::kRoleTypeFieldNumber;
const int RoleList_Ack_RoleList::kLevelFieldNumber;
const int RoleList_Ack_RoleList::kBreakTypeFieldNumber;
const int RoleList_Ack_RoleList::kIsMaxFieldNumber;
#endif  // !_MSC_VER

RoleList_Ack_RoleList::RoleList_Ack_RoleList()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RoleList_Ack_RoleList::InitAsDefaultInstance() {
}

RoleList_Ack_RoleList::RoleList_Ack_RoleList(const RoleList_Ack_RoleList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RoleList_Ack_RoleList::SharedCtor() {
  _cached_size_ = 0;
  roletype_ = 0;
  level_ = 0;
  breaktype_ = false;
  ismax_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RoleList_Ack_RoleList::~RoleList_Ack_RoleList() {
  SharedDtor();
}

void RoleList_Ack_RoleList::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RoleList_Ack_RoleList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RoleList_Ack_RoleList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RoleList_Ack_RoleList_descriptor_;
}

const RoleList_Ack_RoleList& RoleList_Ack_RoleList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_RoleList_5fAck_2eproto();
  return *default_instance_;
}

RoleList_Ack_RoleList* RoleList_Ack_RoleList::default_instance_ = NULL;

RoleList_Ack_RoleList* RoleList_Ack_RoleList::New() const {
  return new RoleList_Ack_RoleList;
}

void RoleList_Ack_RoleList::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    roletype_ = 0;
    level_ = 0;
    breaktype_ = false;
    ismax_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RoleList_Ack_RoleList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 roleType = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &roletype_)));
          set_has_roletype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_level;
        break;
      }

      // optional int32 level = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_breakType;
        break;
      }

      // optional bool breakType = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_breakType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &breaktype_)));
          set_has_breaktype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_isMax;
        break;
      }

      // optional bool isMax = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isMax:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &ismax_)));
          set_has_ismax();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RoleList_Ack_RoleList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 roleType = 1;
  if (has_roletype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->roletype(), output);
  }

  // optional int32 level = 2;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->level(), output);
  }

  // optional bool breakType = 3;
  if (has_breaktype()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->breaktype(), output);
  }

  // optional bool isMax = 4;
  if (has_ismax()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->ismax(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RoleList_Ack_RoleList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 roleType = 1;
  if (has_roletype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->roletype(), target);
  }

  // optional int32 level = 2;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->level(), target);
  }

  // optional bool breakType = 3;
  if (has_breaktype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->breaktype(), target);
  }

  // optional bool isMax = 4;
  if (has_ismax()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->ismax(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RoleList_Ack_RoleList::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 roleType = 1;
    if (has_roletype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->roletype());
    }

    // optional int32 level = 2;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->level());
    }

    // optional bool breakType = 3;
    if (has_breaktype()) {
      total_size += 1 + 1;
    }

    // optional bool isMax = 4;
    if (has_ismax()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RoleList_Ack_RoleList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RoleList_Ack_RoleList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RoleList_Ack_RoleList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RoleList_Ack_RoleList::MergeFrom(const RoleList_Ack_RoleList& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_roletype()) {
      set_roletype(from.roletype());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_breaktype()) {
      set_breaktype(from.breaktype());
    }
    if (from.has_ismax()) {
      set_ismax(from.ismax());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RoleList_Ack_RoleList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RoleList_Ack_RoleList::CopyFrom(const RoleList_Ack_RoleList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoleList_Ack_RoleList::IsInitialized() const {

  return true;
}

void RoleList_Ack_RoleList::Swap(RoleList_Ack_RoleList* other) {
  if (other != this) {
    std::swap(roletype_, other->roletype_);
    std::swap(level_, other->level_);
    std::swap(breaktype_, other->breaktype_);
    std::swap(ismax_, other->ismax_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RoleList_Ack_RoleList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RoleList_Ack_RoleList_descriptor_;
  metadata.reflection = RoleList_Ack_RoleList_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int RoleList_Ack::kMsgInfoFieldNumber;
const int RoleList_Ack::kRoleListFieldNumber;
const int RoleList_Ack::kAcktimeFieldNumber;
#endif  // !_MSC_VER

RoleList_Ack::RoleList_Ack()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RoleList_Ack::InitAsDefaultInstance() {
}

RoleList_Ack::RoleList_Ack(const RoleList_Ack& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RoleList_Ack::SharedCtor() {
  _cached_size_ = 0;
  msginfo_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  acktime_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RoleList_Ack::~RoleList_Ack() {
  SharedDtor();
}

void RoleList_Ack::SharedDtor() {
  if (msginfo_ != &::google::protobuf::internal::kEmptyString) {
    delete msginfo_;
  }
  if (this != default_instance_) {
  }
}

void RoleList_Ack::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RoleList_Ack::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RoleList_Ack_descriptor_;
}

const RoleList_Ack& RoleList_Ack::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_RoleList_5fAck_2eproto();
  return *default_instance_;
}

RoleList_Ack* RoleList_Ack::default_instance_ = NULL;

RoleList_Ack* RoleList_Ack::New() const {
  return new RoleList_Ack;
}

void RoleList_Ack::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_msginfo()) {
      if (msginfo_ != &::google::protobuf::internal::kEmptyString) {
        msginfo_->clear();
      }
    }
    acktime_ = 0;
  }
  rolelist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RoleList_Ack::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string msgInfo = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msginfo()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->msginfo().data(), this->msginfo().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_roleList;
        break;
      }

      // repeated .protobuf.RoleList_Ack.RoleList roleList = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_roleList:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_rolelist()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_roleList;
        if (input->ExpectTag(24)) goto parse_acktime;
        break;
      }

      // required int32 acktime = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_acktime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &acktime_)));
          set_has_acktime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RoleList_Ack::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string msgInfo = 1;
  if (has_msginfo()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msginfo().data(), this->msginfo().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->msginfo(), output);
  }

  // repeated .protobuf.RoleList_Ack.RoleList roleList = 2;
  for (int i = 0; i < this->rolelist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->rolelist(i), output);
  }

  // required int32 acktime = 3;
  if (has_acktime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->acktime(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RoleList_Ack::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string msgInfo = 1;
  if (has_msginfo()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msginfo().data(), this->msginfo().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->msginfo(), target);
  }

  // repeated .protobuf.RoleList_Ack.RoleList roleList = 2;
  for (int i = 0; i < this->rolelist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->rolelist(i), target);
  }

  // required int32 acktime = 3;
  if (has_acktime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->acktime(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RoleList_Ack::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string msgInfo = 1;
    if (has_msginfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->msginfo());
    }

    // required int32 acktime = 3;
    if (has_acktime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->acktime());
    }

  }
  // repeated .protobuf.RoleList_Ack.RoleList roleList = 2;
  total_size += 1 * this->rolelist_size();
  for (int i = 0; i < this->rolelist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->rolelist(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RoleList_Ack::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RoleList_Ack* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RoleList_Ack*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RoleList_Ack::MergeFrom(const RoleList_Ack& from) {
  GOOGLE_CHECK_NE(&from, this);
  rolelist_.MergeFrom(from.rolelist_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msginfo()) {
      set_msginfo(from.msginfo());
    }
    if (from.has_acktime()) {
      set_acktime(from.acktime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RoleList_Ack::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RoleList_Ack::CopyFrom(const RoleList_Ack& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoleList_Ack::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000004) != 0x00000004) return false;

  return true;
}

void RoleList_Ack::Swap(RoleList_Ack* other) {
  if (other != this) {
    std::swap(msginfo_, other->msginfo_);
    rolelist_.Swap(&other->rolelist_);
    std::swap(acktime_, other->acktime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RoleList_Ack::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RoleList_Ack_descriptor_;
  metadata.reflection = RoleList_Ack_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace protobuf

// @@protoc_insertion_point(global_scope)
