// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: TaskList_Ack.proto

#ifndef PROTOBUF_TaskList_5fAck_2eproto__INCLUDED
#define PROTOBUF_TaskList_5fAck_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace protobuf {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_TaskList_5fAck_2eproto();
void protobuf_AssignDesc_TaskList_5fAck_2eproto();
void protobuf_ShutdownFile_TaskList_5fAck_2eproto();

class TaskList_Ack;
class TaskList_Ack_TaskList;

// ===================================================================

class TaskList_Ack_TaskList : public ::google::protobuf::Message {
 public:
  TaskList_Ack_TaskList();
  virtual ~TaskList_Ack_TaskList();

  TaskList_Ack_TaskList(const TaskList_Ack_TaskList& from);

  inline TaskList_Ack_TaskList& operator=(const TaskList_Ack_TaskList& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TaskList_Ack_TaskList& default_instance();

  void Swap(TaskList_Ack_TaskList* other);

  // implements Message ----------------------------------------------

  TaskList_Ack_TaskList* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TaskList_Ack_TaskList& from);
  void MergeFrom(const TaskList_Ack_TaskList& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 taskid = 1;
  inline bool has_taskid() const;
  inline void clear_taskid();
  static const int kTaskidFieldNumber = 1;
  inline ::google::protobuf::int32 taskid() const;
  inline void set_taskid(::google::protobuf::int32 value);

  // optional int32 tasktype = 2;
  inline bool has_tasktype() const;
  inline void clear_tasktype();
  static const int kTasktypeFieldNumber = 2;
  inline ::google::protobuf::int32 tasktype() const;
  inline void set_tasktype(::google::protobuf::int32 value);

  // optional int32 present = 3;
  inline bool has_present() const;
  inline void clear_present();
  static const int kPresentFieldNumber = 3;
  inline ::google::protobuf::int32 present() const;
  inline void set_present(::google::protobuf::int32 value);

  // optional int32 total = 4;
  inline bool has_total() const;
  inline void clear_total();
  static const int kTotalFieldNumber = 4;
  inline ::google::protobuf::int32 total() const;
  inline void set_total(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:protobuf.TaskList_Ack.TaskList)
 private:
  inline void set_has_taskid();
  inline void clear_has_taskid();
  inline void set_has_tasktype();
  inline void clear_has_tasktype();
  inline void set_has_present();
  inline void clear_has_present();
  inline void set_has_total();
  inline void clear_has_total();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 taskid_;
  ::google::protobuf::int32 tasktype_;
  ::google::protobuf::int32 present_;
  ::google::protobuf::int32 total_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_TaskList_5fAck_2eproto();
  friend void protobuf_AssignDesc_TaskList_5fAck_2eproto();
  friend void protobuf_ShutdownFile_TaskList_5fAck_2eproto();

  void InitAsDefaultInstance();
  static TaskList_Ack_TaskList* default_instance_;
};
// -------------------------------------------------------------------

class TaskList_Ack : public ::google::protobuf::Message {
 public:
  TaskList_Ack();
  virtual ~TaskList_Ack();

  TaskList_Ack(const TaskList_Ack& from);

  inline TaskList_Ack& operator=(const TaskList_Ack& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TaskList_Ack& default_instance();

  void Swap(TaskList_Ack* other);

  // implements Message ----------------------------------------------

  TaskList_Ack* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TaskList_Ack& from);
  void MergeFrom(const TaskList_Ack& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef TaskList_Ack_TaskList TaskList;

  // accessors -------------------------------------------------------

  // optional string msgInfo = 1;
  inline bool has_msginfo() const;
  inline void clear_msginfo();
  static const int kMsgInfoFieldNumber = 1;
  inline const ::std::string& msginfo() const;
  inline void set_msginfo(const ::std::string& value);
  inline void set_msginfo(const char* value);
  inline void set_msginfo(const char* value, size_t size);
  inline ::std::string* mutable_msginfo();
  inline ::std::string* release_msginfo();
  inline void set_allocated_msginfo(::std::string* msginfo);

  // repeated .protobuf.TaskList_Ack.TaskList tasklist = 2;
  inline int tasklist_size() const;
  inline void clear_tasklist();
  static const int kTasklistFieldNumber = 2;
  inline const ::protobuf::TaskList_Ack_TaskList& tasklist(int index) const;
  inline ::protobuf::TaskList_Ack_TaskList* mutable_tasklist(int index);
  inline ::protobuf::TaskList_Ack_TaskList* add_tasklist();
  inline const ::google::protobuf::RepeatedPtrField< ::protobuf::TaskList_Ack_TaskList >&
      tasklist() const;
  inline ::google::protobuf::RepeatedPtrField< ::protobuf::TaskList_Ack_TaskList >*
      mutable_tasklist();

  // required int32 acktime = 3;
  inline bool has_acktime() const;
  inline void clear_acktime();
  static const int kAcktimeFieldNumber = 3;
  inline ::google::protobuf::int32 acktime() const;
  inline void set_acktime(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:protobuf.TaskList_Ack)
 private:
  inline void set_has_msginfo();
  inline void clear_has_msginfo();
  inline void set_has_acktime();
  inline void clear_has_acktime();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* msginfo_;
  ::google::protobuf::RepeatedPtrField< ::protobuf::TaskList_Ack_TaskList > tasklist_;
  ::google::protobuf::int32 acktime_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_TaskList_5fAck_2eproto();
  friend void protobuf_AssignDesc_TaskList_5fAck_2eproto();
  friend void protobuf_ShutdownFile_TaskList_5fAck_2eproto();

  void InitAsDefaultInstance();
  static TaskList_Ack* default_instance_;
};
// ===================================================================


// ===================================================================

// TaskList_Ack_TaskList

// optional int32 taskid = 1;
inline bool TaskList_Ack_TaskList::has_taskid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TaskList_Ack_TaskList::set_has_taskid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TaskList_Ack_TaskList::clear_has_taskid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TaskList_Ack_TaskList::clear_taskid() {
  taskid_ = 0;
  clear_has_taskid();
}
inline ::google::protobuf::int32 TaskList_Ack_TaskList::taskid() const {
  return taskid_;
}
inline void TaskList_Ack_TaskList::set_taskid(::google::protobuf::int32 value) {
  set_has_taskid();
  taskid_ = value;
}

// optional int32 tasktype = 2;
inline bool TaskList_Ack_TaskList::has_tasktype() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TaskList_Ack_TaskList::set_has_tasktype() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TaskList_Ack_TaskList::clear_has_tasktype() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TaskList_Ack_TaskList::clear_tasktype() {
  tasktype_ = 0;
  clear_has_tasktype();
}
inline ::google::protobuf::int32 TaskList_Ack_TaskList::tasktype() const {
  return tasktype_;
}
inline void TaskList_Ack_TaskList::set_tasktype(::google::protobuf::int32 value) {
  set_has_tasktype();
  tasktype_ = value;
}

// optional int32 present = 3;
inline bool TaskList_Ack_TaskList::has_present() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TaskList_Ack_TaskList::set_has_present() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TaskList_Ack_TaskList::clear_has_present() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TaskList_Ack_TaskList::clear_present() {
  present_ = 0;
  clear_has_present();
}
inline ::google::protobuf::int32 TaskList_Ack_TaskList::present() const {
  return present_;
}
inline void TaskList_Ack_TaskList::set_present(::google::protobuf::int32 value) {
  set_has_present();
  present_ = value;
}

// optional int32 total = 4;
inline bool TaskList_Ack_TaskList::has_total() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TaskList_Ack_TaskList::set_has_total() {
  _has_bits_[0] |= 0x00000008u;
}
inline void TaskList_Ack_TaskList::clear_has_total() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void TaskList_Ack_TaskList::clear_total() {
  total_ = 0;
  clear_has_total();
}
inline ::google::protobuf::int32 TaskList_Ack_TaskList::total() const {
  return total_;
}
inline void TaskList_Ack_TaskList::set_total(::google::protobuf::int32 value) {
  set_has_total();
  total_ = value;
}

// -------------------------------------------------------------------

// TaskList_Ack

// optional string msgInfo = 1;
inline bool TaskList_Ack::has_msginfo() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TaskList_Ack::set_has_msginfo() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TaskList_Ack::clear_has_msginfo() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TaskList_Ack::clear_msginfo() {
  if (msginfo_ != &::google::protobuf::internal::kEmptyString) {
    msginfo_->clear();
  }
  clear_has_msginfo();
}
inline const ::std::string& TaskList_Ack::msginfo() const {
  return *msginfo_;
}
inline void TaskList_Ack::set_msginfo(const ::std::string& value) {
  set_has_msginfo();
  if (msginfo_ == &::google::protobuf::internal::kEmptyString) {
    msginfo_ = new ::std::string;
  }
  msginfo_->assign(value);
}
inline void TaskList_Ack::set_msginfo(const char* value) {
  set_has_msginfo();
  if (msginfo_ == &::google::protobuf::internal::kEmptyString) {
    msginfo_ = new ::std::string;
  }
  msginfo_->assign(value);
}
inline void TaskList_Ack::set_msginfo(const char* value, size_t size) {
  set_has_msginfo();
  if (msginfo_ == &::google::protobuf::internal::kEmptyString) {
    msginfo_ = new ::std::string;
  }
  msginfo_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* TaskList_Ack::mutable_msginfo() {
  set_has_msginfo();
  if (msginfo_ == &::google::protobuf::internal::kEmptyString) {
    msginfo_ = new ::std::string;
  }
  return msginfo_;
}
inline ::std::string* TaskList_Ack::release_msginfo() {
  clear_has_msginfo();
  if (msginfo_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = msginfo_;
    msginfo_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void TaskList_Ack::set_allocated_msginfo(::std::string* msginfo) {
  if (msginfo_ != &::google::protobuf::internal::kEmptyString) {
    delete msginfo_;
  }
  if (msginfo) {
    set_has_msginfo();
    msginfo_ = msginfo;
  } else {
    clear_has_msginfo();
    msginfo_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// repeated .protobuf.TaskList_Ack.TaskList tasklist = 2;
inline int TaskList_Ack::tasklist_size() const {
  return tasklist_.size();
}
inline void TaskList_Ack::clear_tasklist() {
  tasklist_.Clear();
}
inline const ::protobuf::TaskList_Ack_TaskList& TaskList_Ack::tasklist(int index) const {
  return tasklist_.Get(index);
}
inline ::protobuf::TaskList_Ack_TaskList* TaskList_Ack::mutable_tasklist(int index) {
  return tasklist_.Mutable(index);
}
inline ::protobuf::TaskList_Ack_TaskList* TaskList_Ack::add_tasklist() {
  return tasklist_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::protobuf::TaskList_Ack_TaskList >&
TaskList_Ack::tasklist() const {
  return tasklist_;
}
inline ::google::protobuf::RepeatedPtrField< ::protobuf::TaskList_Ack_TaskList >*
TaskList_Ack::mutable_tasklist() {
  return &tasklist_;
}

// required int32 acktime = 3;
inline bool TaskList_Ack::has_acktime() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TaskList_Ack::set_has_acktime() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TaskList_Ack::clear_has_acktime() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TaskList_Ack::clear_acktime() {
  acktime_ = 0;
  clear_has_acktime();
}
inline ::google::protobuf::int32 TaskList_Ack::acktime() const {
  return acktime_;
}
inline void TaskList_Ack::set_acktime(::google::protobuf::int32 value) {
  set_has_acktime();
  acktime_ = value;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace protobuf

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_TaskList_5fAck_2eproto__INCLUDED
