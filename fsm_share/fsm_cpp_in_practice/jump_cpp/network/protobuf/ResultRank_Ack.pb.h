// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ResultRank_Ack.proto

#ifndef PROTOBUF_ResultRank_5fAck_2eproto__INCLUDED
#define PROTOBUF_ResultRank_5fAck_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace protobuf {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_ResultRank_5fAck_2eproto();
void protobuf_AssignDesc_ResultRank_5fAck_2eproto();
void protobuf_ShutdownFile_ResultRank_5fAck_2eproto();

class UpRankList;
class ResultRank_Ack;

// ===================================================================

class UpRankList : public ::google::protobuf::Message {
 public:
  UpRankList();
  virtual ~UpRankList();

  UpRankList(const UpRankList& from);

  inline UpRankList& operator=(const UpRankList& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const UpRankList& default_instance();

  void Swap(UpRankList* other);

  // implements Message ----------------------------------------------

  UpRankList* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const UpRankList& from);
  void MergeFrom(const UpRankList& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string nickname = 1;
  inline bool has_nickname() const;
  inline void clear_nickname();
  static const int kNicknameFieldNumber = 1;
  inline const ::std::string& nickname() const;
  inline void set_nickname(const ::std::string& value);
  inline void set_nickname(const char* value);
  inline void set_nickname(const char* value, size_t size);
  inline ::std::string* mutable_nickname();
  inline ::std::string* release_nickname();
  inline void set_allocated_nickname(::std::string* nickname);

  // optional int32 roleType = 2;
  inline bool has_roletype() const;
  inline void clear_roletype();
  static const int kRoleTypeFieldNumber = 2;
  inline ::google::protobuf::int32 roletype() const;
  inline void set_roletype(::google::protobuf::int32 value);

  // optional int32 score = 3;
  inline bool has_score() const;
  inline void clear_score();
  static const int kScoreFieldNumber = 3;
  inline ::google::protobuf::int32 score() const;
  inline void set_score(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:protobuf.UpRankList)
 private:
  inline void set_has_nickname();
  inline void clear_has_nickname();
  inline void set_has_roletype();
  inline void clear_has_roletype();
  inline void set_has_score();
  inline void clear_has_score();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* nickname_;
  ::google::protobuf::int32 roletype_;
  ::google::protobuf::int32 score_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_ResultRank_5fAck_2eproto();
  friend void protobuf_AssignDesc_ResultRank_5fAck_2eproto();
  friend void protobuf_ShutdownFile_ResultRank_5fAck_2eproto();

  void InitAsDefaultInstance();
  static UpRankList* default_instance_;
};
// -------------------------------------------------------------------

class ResultRank_Ack : public ::google::protobuf::Message {
 public:
  ResultRank_Ack();
  virtual ~ResultRank_Ack();

  ResultRank_Ack(const ResultRank_Ack& from);

  inline ResultRank_Ack& operator=(const ResultRank_Ack& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ResultRank_Ack& default_instance();

  void Swap(ResultRank_Ack* other);

  // implements Message ----------------------------------------------

  ResultRank_Ack* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ResultRank_Ack& from);
  void MergeFrom(const ResultRank_Ack& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string msgInfo = 1;
  inline bool has_msginfo() const;
  inline void clear_msginfo();
  static const int kMsgInfoFieldNumber = 1;
  inline const ::std::string& msginfo() const;
  inline void set_msginfo(const ::std::string& value);
  inline void set_msginfo(const char* value);
  inline void set_msginfo(const char* value, size_t size);
  inline ::std::string* mutable_msginfo();
  inline ::std::string* release_msginfo();
  inline void set_allocated_msginfo(::std::string* msginfo);

  // repeated .protobuf.UpRankList upRankList = 2;
  inline int upranklist_size() const;
  inline void clear_upranklist();
  static const int kUpRankListFieldNumber = 2;
  inline const ::protobuf::UpRankList& upranklist(int index) const;
  inline ::protobuf::UpRankList* mutable_upranklist(int index);
  inline ::protobuf::UpRankList* add_upranklist();
  inline const ::google::protobuf::RepeatedPtrField< ::protobuf::UpRankList >&
      upranklist() const;
  inline ::google::protobuf::RepeatedPtrField< ::protobuf::UpRankList >*
      mutable_upranklist();

  // required int32 acktime = 3;
  inline bool has_acktime() const;
  inline void clear_acktime();
  static const int kAcktimeFieldNumber = 3;
  inline ::google::protobuf::int32 acktime() const;
  inline void set_acktime(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:protobuf.ResultRank_Ack)
 private:
  inline void set_has_msginfo();
  inline void clear_has_msginfo();
  inline void set_has_acktime();
  inline void clear_has_acktime();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* msginfo_;
  ::google::protobuf::RepeatedPtrField< ::protobuf::UpRankList > upranklist_;
  ::google::protobuf::int32 acktime_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_ResultRank_5fAck_2eproto();
  friend void protobuf_AssignDesc_ResultRank_5fAck_2eproto();
  friend void protobuf_ShutdownFile_ResultRank_5fAck_2eproto();

  void InitAsDefaultInstance();
  static ResultRank_Ack* default_instance_;
};
// ===================================================================


// ===================================================================

// UpRankList

// optional string nickname = 1;
inline bool UpRankList::has_nickname() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void UpRankList::set_has_nickname() {
  _has_bits_[0] |= 0x00000001u;
}
inline void UpRankList::clear_has_nickname() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void UpRankList::clear_nickname() {
  if (nickname_ != &::google::protobuf::internal::kEmptyString) {
    nickname_->clear();
  }
  clear_has_nickname();
}
inline const ::std::string& UpRankList::nickname() const {
  return *nickname_;
}
inline void UpRankList::set_nickname(const ::std::string& value) {
  set_has_nickname();
  if (nickname_ == &::google::protobuf::internal::kEmptyString) {
    nickname_ = new ::std::string;
  }
  nickname_->assign(value);
}
inline void UpRankList::set_nickname(const char* value) {
  set_has_nickname();
  if (nickname_ == &::google::protobuf::internal::kEmptyString) {
    nickname_ = new ::std::string;
  }
  nickname_->assign(value);
}
inline void UpRankList::set_nickname(const char* value, size_t size) {
  set_has_nickname();
  if (nickname_ == &::google::protobuf::internal::kEmptyString) {
    nickname_ = new ::std::string;
  }
  nickname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* UpRankList::mutable_nickname() {
  set_has_nickname();
  if (nickname_ == &::google::protobuf::internal::kEmptyString) {
    nickname_ = new ::std::string;
  }
  return nickname_;
}
inline ::std::string* UpRankList::release_nickname() {
  clear_has_nickname();
  if (nickname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = nickname_;
    nickname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void UpRankList::set_allocated_nickname(::std::string* nickname) {
  if (nickname_ != &::google::protobuf::internal::kEmptyString) {
    delete nickname_;
  }
  if (nickname) {
    set_has_nickname();
    nickname_ = nickname;
  } else {
    clear_has_nickname();
    nickname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 roleType = 2;
inline bool UpRankList::has_roletype() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void UpRankList::set_has_roletype() {
  _has_bits_[0] |= 0x00000002u;
}
inline void UpRankList::clear_has_roletype() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void UpRankList::clear_roletype() {
  roletype_ = 0;
  clear_has_roletype();
}
inline ::google::protobuf::int32 UpRankList::roletype() const {
  return roletype_;
}
inline void UpRankList::set_roletype(::google::protobuf::int32 value) {
  set_has_roletype();
  roletype_ = value;
}

// optional int32 score = 3;
inline bool UpRankList::has_score() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void UpRankList::set_has_score() {
  _has_bits_[0] |= 0x00000004u;
}
inline void UpRankList::clear_has_score() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void UpRankList::clear_score() {
  score_ = 0;
  clear_has_score();
}
inline ::google::protobuf::int32 UpRankList::score() const {
  return score_;
}
inline void UpRankList::set_score(::google::protobuf::int32 value) {
  set_has_score();
  score_ = value;
}

// -------------------------------------------------------------------

// ResultRank_Ack

// optional string msgInfo = 1;
inline bool ResultRank_Ack::has_msginfo() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ResultRank_Ack::set_has_msginfo() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ResultRank_Ack::clear_has_msginfo() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ResultRank_Ack::clear_msginfo() {
  if (msginfo_ != &::google::protobuf::internal::kEmptyString) {
    msginfo_->clear();
  }
  clear_has_msginfo();
}
inline const ::std::string& ResultRank_Ack::msginfo() const {
  return *msginfo_;
}
inline void ResultRank_Ack::set_msginfo(const ::std::string& value) {
  set_has_msginfo();
  if (msginfo_ == &::google::protobuf::internal::kEmptyString) {
    msginfo_ = new ::std::string;
  }
  msginfo_->assign(value);
}
inline void ResultRank_Ack::set_msginfo(const char* value) {
  set_has_msginfo();
  if (msginfo_ == &::google::protobuf::internal::kEmptyString) {
    msginfo_ = new ::std::string;
  }
  msginfo_->assign(value);
}
inline void ResultRank_Ack::set_msginfo(const char* value, size_t size) {
  set_has_msginfo();
  if (msginfo_ == &::google::protobuf::internal::kEmptyString) {
    msginfo_ = new ::std::string;
  }
  msginfo_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ResultRank_Ack::mutable_msginfo() {
  set_has_msginfo();
  if (msginfo_ == &::google::protobuf::internal::kEmptyString) {
    msginfo_ = new ::std::string;
  }
  return msginfo_;
}
inline ::std::string* ResultRank_Ack::release_msginfo() {
  clear_has_msginfo();
  if (msginfo_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = msginfo_;
    msginfo_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void ResultRank_Ack::set_allocated_msginfo(::std::string* msginfo) {
  if (msginfo_ != &::google::protobuf::internal::kEmptyString) {
    delete msginfo_;
  }
  if (msginfo) {
    set_has_msginfo();
    msginfo_ = msginfo;
  } else {
    clear_has_msginfo();
    msginfo_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// repeated .protobuf.UpRankList upRankList = 2;
inline int ResultRank_Ack::upranklist_size() const {
  return upranklist_.size();
}
inline void ResultRank_Ack::clear_upranklist() {
  upranklist_.Clear();
}
inline const ::protobuf::UpRankList& ResultRank_Ack::upranklist(int index) const {
  return upranklist_.Get(index);
}
inline ::protobuf::UpRankList* ResultRank_Ack::mutable_upranklist(int index) {
  return upranklist_.Mutable(index);
}
inline ::protobuf::UpRankList* ResultRank_Ack::add_upranklist() {
  return upranklist_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::protobuf::UpRankList >&
ResultRank_Ack::upranklist() const {
  return upranklist_;
}
inline ::google::protobuf::RepeatedPtrField< ::protobuf::UpRankList >*
ResultRank_Ack::mutable_upranklist() {
  return &upranklist_;
}

// required int32 acktime = 3;
inline bool ResultRank_Ack::has_acktime() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ResultRank_Ack::set_has_acktime() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ResultRank_Ack::clear_has_acktime() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ResultRank_Ack::clear_acktime() {
  acktime_ = 0;
  clear_has_acktime();
}
inline ::google::protobuf::int32 ResultRank_Ack::acktime() const {
  return acktime_;
}
inline void ResultRank_Ack::set_acktime(::google::protobuf::int32 value) {
  set_has_acktime();
  acktime_ = value;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace protobuf

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_ResultRank_5fAck_2eproto__INCLUDED
