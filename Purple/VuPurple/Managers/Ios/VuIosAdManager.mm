//*****************************************************************************
//
//  Copyright (c) 2014-2014 Vector Unit Inc
//  Confidential Trade Secrets
// 
//  Stub Advertising manager
//
//*****************************************************************************

#import <FuseAPI.h>
#import "SponsorPaySDK.h"

#include "VuPurple/Managers/VuAdManager.h"


#define FYBER_APP_ID "23711"


// VuFuseAdDelegate
//
@interface VuFuseAdDelegate : NSObject<FuseAdDelegate>
@end

// VuSPDelegate
//
@interface VuSPDelegate : NSObject<SPBrandEngageClientDelegate, SPInterstitialClientDelegate>
@end


class VuIosAdManager : public VuAdManager
{
public:
	VuIosAdManager();
	
	virtual bool	init();
	virtual void	release();
	
	static VuIosAdManager *IF() { return static_cast<VuIosAdManager *>(VuAdManager::IF()); }

	void			onAdRallyAdAvailable(bool available);
	void			onAdRallyAdFinished(bool completed);
	
	void			onSPBrandEngageAdAvailable(bool available);
	void			onSPBrandEngageChangeStatus(SPBrandEngageClientStatus newStatus);
	void			onSPInterstitialAdAvailable(bool available);
	void			onSPInterstitialAdDismissed();
	void			onSPInterstitialAdFail();
	
protected:
	virtual bool	isAdReadyInternal(int adUnit);
	virtual void	showAdInternal(int adUnit);
	virtual void	checkForAdsInternal();
	
	// AdRally
	VuFuseAdDelegate	*mFuseAdDelegate;
	bool				mAdRallyAdAvailable;
	bool				mAdRallyNeedsRefresh;
	
	// Fyber
	VuSPDelegate			*mSPDelegate;
	bool					mSPBrandEngageAdAvailable;
	bool					mSPBrandEngageNeedsRefresh;
	bool					mSPInterstitialAdAvailable;
	bool					mSPInterstitialNeedsRefresh;
};

// the interface
IMPLEMENT_SYSTEM_COMPONENT(VuAdManager, VuIosAdManager);


//*****************************************************************************
VuIosAdManager::VuIosAdManager():
	mAdRallyAdAvailable(false),
	mAdRallyNeedsRefresh(true),
	mSPBrandEngageAdAvailable(false),
	mSPBrandEngageNeedsRefresh(true),
	mSPInterstitialAdAvailable(false),
	mSPInterstitialNeedsRefresh(true)
{
}

//*****************************************************************************
bool VuIosAdManager::init()
{
	if ( !VuAdManager::init() )
		return false;
	
	mFuseAdDelegate = [[VuFuseAdDelegate alloc] init];
	mSPDelegate = [[VuSPDelegate alloc] init];
	
	[SponsorPaySDK startWithAutogeneratedUserForAppId:@FYBER_APP_ID securityToken:nil];
	
	[SponsorPaySDK brandEngageClient].delegate = mSPDelegate;
	[SponsorPaySDK interstitialClient].delegate = mSPDelegate;
	
#ifdef VURETAIL
	[SponsorPaySDK setLoggingLevel:SPLogLevelOff];
#elif defined VUDEBUG
	[SponsorPaySDK setLoggingLevel:SPLogLevelDebug];
#endif
	
	return true;
}

//*****************************************************************************
void VuIosAdManager::release()
{
	VuAdManager::release();
}

//*****************************************************************************
bool VuIosAdManager::isAdReadyInternal(int adUnit)
{
	if ( adUnit == AD_UNIT_INTERSTITIAL )
	{
		if ( mSPInterstitialAdAvailable )
			return true;
		
		if ( mAdRallyAdAvailable )
			return true;
	}
	else if ( adUnit == AD_UNIT_INCENTIVIZED )
	{
		if ( mSPBrandEngageAdAvailable )
			return true;
		
		if ( mAdRallyAdAvailable )
			return true;
	}
	else if ( adUnit == AD_UNIT_REWARD )
	{
		return false;
	}

	return false;
}

//*****************************************************************************
void VuIosAdManager::showAdInternal(int adUnit)
{
	if ( adUnit == AD_UNIT_INTERSTITIAL )
	{
		if ( mSPInterstitialAdAvailable )
		{
			[[SponsorPaySDK interstitialClient] showInterstitialFromViewController:[[[UIApplication sharedApplication] keyWindow] rootViewController]];
		}
		else if ( mAdRallyAdAvailable )
		{
			[FuseAPI showAdWithDelegate:mFuseAdDelegate];
		}
	}
	else if ( adUnit == AD_UNIT_INCENTIVIZED )
	{
		if ( mSPBrandEngageAdAvailable )
		{
			[[SponsorPaySDK brandEngageClient] startWithParentViewController:[[[UIApplication sharedApplication] keyWindow] rootViewController]];
		}
		else if ( mAdRallyAdAvailable )
		{
			[FuseAPI showAdWithDelegate:mFuseAdDelegate];
		}
	}
	else if ( adUnit == AD_UNIT_REWARD )
	{
	}
}

//*****************************************************************************
void VuIosAdManager::checkForAdsInternal()
{
	if ( mAdRallyNeedsRefresh )
	{
		[FuseAPI checkAdAvailableWithDelegate:mFuseAdDelegate];
		mAdRallyNeedsRefresh = false;
	}
	
	if ( mSPBrandEngageNeedsRefresh )
	{
		[[SponsorPaySDK brandEngageClient] requestOffers];
		mSPBrandEngageNeedsRefresh = false;
	}

	if ( mSPInterstitialNeedsRefresh )
	{
		[[SponsorPaySDK interstitialClient] checkInterstitialAvailable];
		mSPInterstitialNeedsRefresh = false;
	}
}

//*****************************************************************************
void VuIosAdManager::onAdRallyAdAvailable(bool available)
{
	mAdRallyAdAvailable = available;
	mAdRallyNeedsRefresh = !available;
}

//*****************************************************************************
void VuIosAdManager::onAdRallyAdFinished(bool completed)
{
	mAdRallyAdAvailable = false;
	mAdRallyNeedsRefresh = true;
	onAdFinished(completed);
}

//*****************************************************************************
void VuIosAdManager::onSPBrandEngageAdAvailable(bool available)
{
	mSPBrandEngageAdAvailable = available;
	mSPBrandEngageNeedsRefresh = !available;
}

//*****************************************************************************
void VuIosAdManager::onSPBrandEngageChangeStatus(SPBrandEngageClientStatus newStatus)
{
	if ( newStatus == CLOSE_FINISHED )
	{
		mSPBrandEngageAdAvailable = false;
		mSPBrandEngageNeedsRefresh = true;
		onAdFinished(true);
	}
	else if ( newStatus == CLOSE_ABORTED )
	{
		mSPBrandEngageAdAvailable = false;
		mSPBrandEngageNeedsRefresh = true;
		onAdFinished(false);
	}
	else if ( newStatus == ERROR )
	{
		mSPBrandEngageAdAvailable = false;
		mSPBrandEngageNeedsRefresh = true;
		onAdFinished(false);
	}
}

//*****************************************************************************
void VuIosAdManager::onSPInterstitialAdAvailable(bool available)
{
	mSPInterstitialAdAvailable = available;
	mSPInterstitialNeedsRefresh = !available;
}

//*****************************************************************************
void VuIosAdManager::onSPInterstitialAdDismissed()
{
	mSPInterstitialAdAvailable = false;
	mSPInterstitialNeedsRefresh = true;
	onAdFinished(true);
}

//*****************************************************************************
void VuIosAdManager::onSPInterstitialAdFail()
{
	mSPInterstitialAdAvailable = false;
	mSPInterstitialNeedsRefresh = true;
	onAdFinished(true);
}


@implementation VuFuseAdDelegate

- (void)adWillClose
{
	VuIosAdManager::IF()->onAdRallyAdFinished(true);
}

- (void)adAvailabilityResponse:(NSNumber*)_available Error:(NSNumber*)_error
{
	VuIosAdManager::IF()->onAdRallyAdAvailable([_available boolValue]);
}

@end



@implementation VuSPDelegate

-(void)brandEngageClient:(SPBrandEngageClient *)client didReceiveOffers:(BOOL)areOffersAvailable
{
	VUPRINTF("SPBrandEngage areOffersAvailable = %s\n", areOffersAvailable ? "YES" : "NO");
	VuIosAdManager::IF()->onSPBrandEngageAdAvailable(areOffersAvailable);
}

-(void)brandEngageClient:(SPBrandEngageClient *)client didChangeStatus:(SPBrandEngageClientStatus)newStatus
{
	VUPRINTF("SPBrandEngage newStatus = %d\n", (int)newStatus);
	VuIosAdManager::IF()->onSPBrandEngageChangeStatus(newStatus);
}

- (void)interstitialClient:(SPInterstitialClient *)client canShowInterstitial:(BOOL)canShowInterstitial
{
	VUPRINTF("SPInterstitial canShowInterstitial = %s\n", canShowInterstitial ? "YES" : "NO");
	VuIosAdManager::IF()->onSPInterstitialAdAvailable(canShowInterstitial);
}

- (void)interstitialClientDidShowInterstitial:(SPInterstitialClient *)client
{
	VUPRINTF("SPInterstitial started\n");
}

- (void)interstitialClient:(SPInterstitialClient *)client didDismissInterstitialWithReason:(SPInterstitialDismissReason)dismissReason
{
	VUPRINTF("SPInterstitial dismissed\n");
	VuIosAdManager::IF()->onSPInterstitialAdDismissed();
}

- (void)interstitialClient:(SPInterstitialClient *)client didFailWithError:(NSError *)error
{
	VUPRINTF("SPInterstitial failed\n");
	VuIosAdManager::IF()->onSPInterstitialAdFail();
}

@end

